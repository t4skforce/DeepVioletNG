package io.github.t4skforce.deepviolet.jackson.dataformat.tls.model.record.handshake;

import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * <strong>This class is generated by {@link io.github.t4skforce.deepviolet.generators.impl.TlsCipherSuiteCodeGenerator}.
 * DO NOT MODIFY!</strong><br/>
 *
 */
class CipherSuiteTest {
  public static final Date UPDATED = new Date(1616628079000L);

  @Test
  public void testStaticGetTlsNullWithNullNull() throws Exception {
    CipherSuite suite = CipherSuite.TLS_NULL_WITH_NULL_NULL;
    Assertions.assertEquals(CipherSuite.of(0x0000), suite);
    Assertions.assertEquals(0x0000, suite.getValue());
    Assertions.assertEquals("TLS_NULL_WITH_NULL_NULL", suite.getName());
    Assertions.assertEquals("TLS_NULL_WITH_NULL_NULL", suite.getIana());
    Assertions.assertEquals("TLS_NULL_WITH_NULL_NULL", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithNullMd5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_NULL_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0001), suite);
    Assertions.assertEquals(0x0001, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_MD5", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_MD5", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_MD5", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_NULL_MD5", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0002), suite);
    Assertions.assertEquals(0x0002, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaExportWithRc440Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_EXPORT_WITH_RC4_40_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0003), suite);
    Assertions.assertEquals(0x0003, suite.getValue());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_RC4_40_MD5", suite.getName());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_RC4_40_MD5", suite.getIana());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_RC4_40_MD5", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithRc4128Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_RC4_128_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0004), suite);
    Assertions.assertEquals(0x0004, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_RC4_128_MD5", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_RC4_128_MD5", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_RC4_128_MD5", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_ARCFOUR_128_MD5", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0005), suite);
    Assertions.assertEquals(0x0005, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_RC4_128_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaExportWithRc2Cbc40Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0006), suite);
    Assertions.assertEquals(0x0006, suite.getValue());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5", suite.getName());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5", suite.getIana());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithIdeaCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_IDEA_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0007), suite);
    Assertions.assertEquals(0x0007, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_IDEA_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_IDEA_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_IDEA_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaExportWithDes40CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_EXPORT_WITH_DES40_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0008), suite);
    Assertions.assertEquals(0x0008, suite.getValue());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithDesCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0009), suite);
    Assertions.assertEquals(0x0009, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_DES_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x000A), suite);
    Assertions.assertEquals(0x000A, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssExportWithDes40CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x000B), suite);
    Assertions.assertEquals(0x000B, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithDesCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x000C), suite);
    Assertions.assertEquals(0x000C, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_DES_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_DSS_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x000D), suite);
    Assertions.assertEquals(0x000D, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaExportWithDes40CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x000E), suite);
    Assertions.assertEquals(0x000E, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithDesCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x000F), suite);
    Assertions.assertEquals(0x000F, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_DES_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_RSA_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0010), suite);
    Assertions.assertEquals(0x0010, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssExportWithDes40CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0011), suite);
    Assertions.assertEquals(0x0011, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithDesCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0012), suite);
    Assertions.assertEquals(0x0012, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_DES_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0013), suite);
    Assertions.assertEquals(0x0013, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaExportWithDes40CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0014), suite);
    Assertions.assertEquals(0x0014, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithDesCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0015), suite);
    Assertions.assertEquals(0x0015, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_DES_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0016), suite);
    Assertions.assertEquals(0x0016, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonExportWithRc440Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_EXPORT_WITH_RC4_40_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0017), suite);
    Assertions.assertEquals(0x0017, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_EXPORT_WITH_RC4_40_MD5", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_EXPORT_WITH_RC4_40_MD5", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_EXPORT_WITH_RC4_40_MD5", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithRc4128Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_RC4_128_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0018), suite);
    Assertions.assertEquals(0x0018, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_RC4_128_MD5", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_RC4_128_MD5", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_WITH_RC4_128_MD5", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_ARCFOUR_128_MD5", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonExportWithDes40CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_EXPORT_WITH_DES40_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0019), suite);
    Assertions.assertEquals(0x0019, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_EXPORT_WITH_DES40_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithDesCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x001A), suite);
    Assertions.assertEquals(0x001A, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_DES_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x001B), suite);
    Assertions.assertEquals(0x001B, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5WithDesCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x001E), suite);
    Assertions.assertEquals(0x001E, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_DES_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5With3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x001F), suite);
    Assertions.assertEquals(0x001F, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5WithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0020), suite);
    Assertions.assertEquals(0x0020, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5WithIdeaCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_IDEA_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0021), suite);
    Assertions.assertEquals(0x0021, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_IDEA_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_IDEA_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5WithDesCbcMd5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_DES_CBC_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0022), suite);
    Assertions.assertEquals(0x0022, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_DES_CBC_MD5", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_DES_CBC_MD5", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5With3desEdeCbcMd5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_3DES_EDE_CBC_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0023), suite);
    Assertions.assertEquals(0x0023, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5WithRc4128Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_RC4_128_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0024), suite);
    Assertions.assertEquals(0x0024, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_RC4_128_MD5", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_RC4_128_MD5", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5WithIdeaCbcMd5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_WITH_IDEA_CBC_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0025), suite);
    Assertions.assertEquals(0x0025, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_WITH_IDEA_CBC_MD5", suite.getName());
    Assertions.assertEquals("TLS_KRB5_WITH_IDEA_CBC_MD5", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5ExportWithDesCbc40Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0026), suite);
    Assertions.assertEquals(0x0026, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", suite.getName());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5ExportWithRc2Cbc40Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0027), suite);
    Assertions.assertEquals(0x0027, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA", suite.getName());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5ExportWithRc440Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_EXPORT_WITH_RC4_40_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0028), suite);
    Assertions.assertEquals(0x0028, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", suite.getName());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5ExportWithDesCbc40Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5;
    Assertions.assertEquals(CipherSuite.of(0x0029), suite);
    Assertions.assertEquals(0x0029, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", suite.getName());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5ExportWithRc2Cbc40Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5;
    Assertions.assertEquals(CipherSuite.of(0x002A), suite);
    Assertions.assertEquals(0x002A, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5", suite.getName());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsKrb5ExportWithRc440Md5() throws Exception {
    CipherSuite suite = CipherSuite.TLS_KRB5_EXPORT_WITH_RC4_40_MD5;
    Assertions.assertEquals(CipherSuite.of(0x002B), suite);
    Assertions.assertEquals(0x002B, suite.getValue());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", suite.getName());
    Assertions.assertEquals("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0x002C), suite);
    Assertions.assertEquals(0x002C, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0x002D), suite);
    Assertions.assertEquals(0x002D, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0x002E), suite);
    Assertions.assertEquals(0x002E, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x002F), suite);
    Assertions.assertEquals(0x002F, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0030), suite);
    Assertions.assertEquals(0x0030, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-DSS-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0031), suite);
    Assertions.assertEquals(0x0031, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-RSA-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0032), suite);
    Assertions.assertEquals(0x0032, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-DSS-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0033), suite);
    Assertions.assertEquals(0x0033, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0034), suite);
    Assertions.assertEquals(0x0034, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ADH-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0035), suite);
    Assertions.assertEquals(0x0035, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0036), suite);
    Assertions.assertEquals(0x0036, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-DSS-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0037), suite);
    Assertions.assertEquals(0x0037, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-RSA-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0038), suite);
    Assertions.assertEquals(0x0038, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-DSS-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0039), suite);
    Assertions.assertEquals(0x0039, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x003A), suite);
    Assertions.assertEquals(0x003A, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ADH-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithNullSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_NULL_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x003B), suite);
    Assertions.assertEquals(0x003B, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_NULL_SHA256", suite.getNss());
    Assertions.assertEquals("NULL-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_NULL_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x003C), suite);
    Assertions.assertEquals(0x003C, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x003D), suite);
    Assertions.assertEquals(0x003D, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("AES256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x003E), suite);
    Assertions.assertEquals(0x003E, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x003F), suite);
    Assertions.assertEquals(0x003F, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x0040), suite);
    Assertions.assertEquals(0x0040, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-DSS-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithCamellia128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0041), suite);
    Assertions.assertEquals(0x0041, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("CAMELLIA128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_CAMELLIA_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithCamellia128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0042), suite);
    Assertions.assertEquals(0x0042, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-DSS-CAMELLIA128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithCamellia128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0043), suite);
    Assertions.assertEquals(0x0043, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-RSA-CAMELLIA128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithCamellia128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0044), suite);
    Assertions.assertEquals(0x0044, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-DSS-CAMELLIA128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_CAMELLIA_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithCamellia128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0045), suite);
    Assertions.assertEquals(0x0045, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-RSA-CAMELLIA128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_CAMELLIA_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithCamellia128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0046), suite);
    Assertions.assertEquals(0x0046, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ADH-CAMELLIA128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_CAMELLIA_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTLSRSAEXPORT1024WITHDESCBCSHA() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0062), suite);
    Assertions.assertEquals(0x0062, suite.getValue());
    Assertions.assertEquals("TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("Reserved to avoid conflicts with widely deployed implementations", suite.getIana());
    Assertions.assertEquals("TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(true, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTLSDHEDSSEXPORT1024WITHDESCBCSHA() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0063), suite);
    Assertions.assertEquals(0x0063, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA", suite.getName());
    Assertions.assertEquals("Reserved to avoid conflicts with widely deployed implementations", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(true, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTLSRSAEXPORT1024WITHRC456SHA() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_EXPORT1024_WITH_RC4_56_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0064), suite);
    Assertions.assertEquals(0x0064, suite.getValue());
    Assertions.assertEquals("TLS_RSA_EXPORT1024_WITH_RC4_56_SHA", suite.getName());
    Assertions.assertEquals("Reserved to avoid conflicts with widely deployed implementations", suite.getIana());
    Assertions.assertEquals("TLS_RSA_EXPORT1024_WITH_RC4_56_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(true, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTLSDHEDSSEXPORT1024WITHRC456SHA() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0065), suite);
    Assertions.assertEquals(0x0065, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA", suite.getName());
    Assertions.assertEquals("Reserved to avoid conflicts with widely deployed implementations", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(true, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTLSDHEDSSWITHRC4128SHA() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0066), suite);
    Assertions.assertEquals(0x0066, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("Reserved to avoid conflicts with widely deployed implementations", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_RC4_128_SHA", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(true, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x0067), suite);
    Assertions.assertEquals(0x0067, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAes256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x0068), suite);
    Assertions.assertEquals(0x0068, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-AES256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAes256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x0069), suite);
    Assertions.assertEquals(0x0069, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-AES256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAes256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x006A), suite);
    Assertions.assertEquals(0x006A, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-DSS-AES256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_AES_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x006B), suite);
    Assertions.assertEquals(0x006B, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x006C), suite);
    Assertions.assertEquals(0x006C, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAes256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_AES_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x006D), suite);
    Assertions.assertEquals(0x006D, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-AES256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_AES_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithCamellia256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0084), suite);
    Assertions.assertEquals(0x0084, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("CAMELLIA256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_CAMELLIA_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithCamellia256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0085), suite);
    Assertions.assertEquals(0x0085, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-DSS-CAMELLIA256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithCamellia256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0086), suite);
    Assertions.assertEquals(0x0086, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DH-RSA-CAMELLIA256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithCamellia256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0087), suite);
    Assertions.assertEquals(0x0087, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-DSS-CAMELLIA256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_CAMELLIA_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithCamellia256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0088), suite);
    Assertions.assertEquals(0x0088, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("DHE-RSA-CAMELLIA256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_CAMELLIA_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithCamellia256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0089), suite);
    Assertions.assertEquals(0x0089, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ADH-CAMELLIA256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_CAMELLIA_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0x008A), suite);
    Assertions.assertEquals(0x008A, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x008B), suite);
    Assertions.assertEquals(0x008B, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-3DES-EDE-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x008C), suite);
    Assertions.assertEquals(0x008C, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES128-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x008D), suite);
    Assertions.assertEquals(0x008D, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES256-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0x008E), suite);
    Assertions.assertEquals(0x008E, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x008F), suite);
    Assertions.assertEquals(0x008F, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-3DES-EDE-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0090), suite);
    Assertions.assertEquals(0x0090, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES128-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0091), suite);
    Assertions.assertEquals(0x0091, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES256-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0092), suite);
    Assertions.assertEquals(0x0092, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0093), suite);
    Assertions.assertEquals(0x0093, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-3DES-EDE-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0094), suite);
    Assertions.assertEquals(0x0094, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-AES128-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0095), suite);
    Assertions.assertEquals(0x0095, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-AES256-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithSeedCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_SEED_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0096), suite);
    Assertions.assertEquals(0x0096, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_SEED_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_SEED_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_SEED_CBC_SHA", suite.getNss());
    Assertions.assertEquals("SEED-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithSeedCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_SEED_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0097), suite);
    Assertions.assertEquals(0x0097, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_SEED_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_SEED_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-SEED-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithSeedCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_SEED_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0098), suite);
    Assertions.assertEquals(0x0098, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_SEED_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_SEED_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-SEED-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithSeedCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_SEED_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x0099), suite);
    Assertions.assertEquals(0x0099, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_SEED_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_SEED_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-DSS-SEED-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithSeedCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_SEED_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x009A), suite);
    Assertions.assertEquals(0x009A, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_SEED_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_SEED_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-SEED-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithSeedCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_SEED_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0x009B), suite);
    Assertions.assertEquals(0x009B, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_SEED_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_SEED_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-SEED-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x009C), suite);
    Assertions.assertEquals(0x009C, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x009D), suite);
    Assertions.assertEquals(0x009D, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals("AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x009E), suite);
    Assertions.assertEquals(0x009E, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x009F), suite);
    Assertions.assertEquals(0x009F, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00A0), suite);
    Assertions.assertEquals(0x00A0, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00A1), suite);
    Assertions.assertEquals(0x00A1, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00A2), suite);
    Assertions.assertEquals(0x00A2, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-DSS-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00A3), suite);
    Assertions.assertEquals(0x00A3, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals("DHE-DSS-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00A4), suite);
    Assertions.assertEquals(0x00A4, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00A5), suite);
    Assertions.assertEquals(0x00A5, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00A6), suite);
    Assertions.assertEquals(0x00A6, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00A7), suite);
    Assertions.assertEquals(0x00A7, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00A8), suite);
    Assertions.assertEquals(0x00A8, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00A9), suite);
    Assertions.assertEquals(0x00A9, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00AA), suite);
    Assertions.assertEquals(0x00AA, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00AB), suite);
    Assertions.assertEquals(0x00AB, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00AC), suite);
    Assertions.assertEquals(0x00AC, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00AD), suite);
    Assertions.assertEquals(0x00AD, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00AE), suite);
    Assertions.assertEquals(0x00AE, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES128-CBC-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00AF), suite);
    Assertions.assertEquals(0x00AF, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES256-CBC-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithNullSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_NULL_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00B0), suite);
    Assertions.assertEquals(0x00B0, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_NULL_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_NULL_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-NULL-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_NULL_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithNullSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_NULL_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00B1), suite);
    Assertions.assertEquals(0x00B1, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_NULL_SHA384", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_NULL_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-NULL-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_NULL_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00B2), suite);
    Assertions.assertEquals(0x00B2, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES128-CBC-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00B3), suite);
    Assertions.assertEquals(0x00B3, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES256-CBC-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithNullSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00B4), suite);
    Assertions.assertEquals(0x00B4, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_NULL_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_NULL_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-NULL-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_NULL_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithNullSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00B5), suite);
    Assertions.assertEquals(0x00B5, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_NULL_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_NULL_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-NULL-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_NULL_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00B6), suite);
    Assertions.assertEquals(0x00B6, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-AES128-CBC-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00B7), suite);
    Assertions.assertEquals(0x00B7, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-AES256-CBC-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_AES_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithNullSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00B8), suite);
    Assertions.assertEquals(0x00B8, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_NULL_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_NULL_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-NULL-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_NULL_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithNullSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x00B9), suite);
    Assertions.assertEquals(0x00B9, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_NULL_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_NULL_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-NULL-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_NULL_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00BA), suite);
    Assertions.assertEquals(0x00BA, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00BB), suite);
    Assertions.assertEquals(0x00BB, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00BC), suite);
    Assertions.assertEquals(0x00BC, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00BD), suite);
    Assertions.assertEquals(0x00BD, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-DSS-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00BE), suite);
    Assertions.assertEquals(0x00BE, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00BF), suite);
    Assertions.assertEquals(0x00BF, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithCamellia256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00C0), suite);
    Assertions.assertEquals(0x00C0, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("CAMELLIA256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_CAMELLIA_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithCamellia256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00C1), suite);
    Assertions.assertEquals(0x00C1, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-CAMELLIA256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithCamellia256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00C2), suite);
    Assertions.assertEquals(0x00C2, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-CAMELLIA256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithCamellia256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00C3), suite);
    Assertions.assertEquals(0x00C3, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-DSS-CAMELLIA256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_CAMELLIA_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithCamellia256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00C4), suite);
    Assertions.assertEquals(0x00C4, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-CAMELLIA256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_CAMELLIA_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithCamellia256CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x00C5), suite);
    Assertions.assertEquals(0x00C5, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-CAMELLIA256-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_CAMELLIA_256_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSm4GcmSm3() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SM4_GCM_SM3;
    Assertions.assertEquals(CipherSuite.of(0x00C6), suite);
    Assertions.assertEquals(0x00C6, suite.getValue());
    Assertions.assertEquals("TLS_SM4_GCM_SM3", suite.getName());
    Assertions.assertEquals("TLS_SM4_GCM_SM3", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSm4CcmSm3() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SM4_CCM_SM3;
    Assertions.assertEquals(CipherSuite.of(0x00C7), suite);
    Assertions.assertEquals(0x00C7, suite.getValue());
    Assertions.assertEquals("TLS_SM4_CCM_SM3", suite.getName());
    Assertions.assertEquals("TLS_SM4_CCM_SM3", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEmptyRenegotiationInfoScsv() throws Exception {
    CipherSuite suite = CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV;
    Assertions.assertEquals(CipherSuite.of(0x00FF), suite);
    Assertions.assertEquals(0x00FF, suite.getValue());
    Assertions.assertEquals("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", suite.getName());
    Assertions.assertEquals("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", suite.getIana());
    Assertions.assertEquals("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x1301), suite);
    Assertions.assertEquals(0x1301, suite.getValue());
    Assertions.assertEquals("TLS_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals(null, suite.getOpenSsl());
    Assertions.assertEquals("TLS_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0x1302), suite);
    Assertions.assertEquals(0x1302, suite.getValue());
    Assertions.assertEquals("TLS_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals(null, suite.getOpenSsl());
    Assertions.assertEquals("TLS_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x1303), suite);
    Assertions.assertEquals(0x1303, suite.getValue());
    Assertions.assertEquals("TLS_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_CHACHA20_POLY1305_SHA256", suite.getNss());
    Assertions.assertEquals(null, suite.getOpenSsl());
    Assertions.assertEquals("TLS_CHACHA20_POLY1305_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsAes128CcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_AES_128_CCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x1304), suite);
    Assertions.assertEquals(0x1304, suite.getValue());
    Assertions.assertEquals("TLS_AES_128_CCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_AES_128_CCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals(null, suite.getOpenSsl());
    Assertions.assertEquals("TLS_AES_128_CCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsAes128Ccm8Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_AES_128_CCM_8_SHA256;
    Assertions.assertEquals(CipherSuite.of(0x1305), suite);
    Assertions.assertEquals(0x1305, suite.getValue());
    Assertions.assertEquals("TLS_AES_128_CCM_8_SHA256", suite.getName());
    Assertions.assertEquals("TLS_AES_128_CCM_8_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals(null, suite.getOpenSsl());
    Assertions.assertEquals("TLS_AES_128_CCM_8_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsFallbackScsv() throws Exception {
    CipherSuite suite = CipherSuite.TLS_FALLBACK_SCSV;
    Assertions.assertEquals(CipherSuite.of(0x5600), suite);
    Assertions.assertEquals(0x5600, suite.getValue());
    Assertions.assertEquals("TLS_FALLBACK_SCSV", suite.getName());
    Assertions.assertEquals("TLS_FALLBACK_SCSV", suite.getIana());
    Assertions.assertEquals("TLS_FALLBACK_SCSV", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC001), suite);
    Assertions.assertEquals(0xC001, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_NULL_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC002), suite);
    Assertions.assertEquals(0xC002, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC003), suite);
    Assertions.assertEquals(0xC003, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-DES-CBC3-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC004), suite);
    Assertions.assertEquals(0xC004, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC005), suite);
    Assertions.assertEquals(0xC005, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC006), suite);
    Assertions.assertEquals(0xC006, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_NULL_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC007), suite);
    Assertions.assertEquals(0xC007, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC008), suite);
    Assertions.assertEquals(0xC008, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-DES-CBC3-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC009), suite);
    Assertions.assertEquals(0xC009, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC00A), suite);
    Assertions.assertEquals(0xC00A, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC00B), suite);
    Assertions.assertEquals(0xC00B, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_NULL_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC00C), suite);
    Assertions.assertEquals(0xC00C, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_RC4_128_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC00D), suite);
    Assertions.assertEquals(0xC00D, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-DES-CBC3-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC00E), suite);
    Assertions.assertEquals(0xC00E, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC00F), suite);
    Assertions.assertEquals(0xC00F, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC010), suite);
    Assertions.assertEquals(0xC010, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_NULL_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC011), suite);
    Assertions.assertEquals(0xC011, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_RC4_128_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC012), suite);
    Assertions.assertEquals(0xC012, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-DES-CBC3-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC013), suite);
    Assertions.assertEquals(0xC013, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC014), suite);
    Assertions.assertEquals(0xC014, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhAnonWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ANON_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC015), suite);
    Assertions.assertEquals(0xC015, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ANON_WITH_NULL_SHA", suite.getNss());
    Assertions.assertEquals("AECDH-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDH_ANON_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhAnonWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ANON_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC016), suite);
    Assertions.assertEquals(0xC016, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ANON_WITH_RC4_128_SHA", suite.getNss());
    Assertions.assertEquals("AECDH-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDH_ANON_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhAnonWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ANON_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC017), suite);
    Assertions.assertEquals(0xC017, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ANON_WITH_3DES_EDE_CBC_SHA", suite.getNss());
    Assertions.assertEquals("AECDH-DES-CBC3-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDH_ANON_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhAnonWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ANON_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC018), suite);
    Assertions.assertEquals(0xC018, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ANON_WITH_AES_128_CBC_SHA", suite.getNss());
    Assertions.assertEquals("AECDH-AES128-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDH_ANON_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhAnonWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ANON_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC019), suite);
    Assertions.assertEquals(0xC019, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ANON_WITH_AES_256_CBC_SHA", suite.getNss());
    Assertions.assertEquals("AECDH-AES256-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDH_ANON_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC01A), suite);
    Assertions.assertEquals(0xC01A, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-3DES-EDE-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaRsaWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC01B), suite);
    Assertions.assertEquals(0xC01B, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-RSA-3DES-EDE-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaDssWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC01C), suite);
    Assertions.assertEquals(0xC01C, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-DSS-3DES-EDE-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC01D), suite);
    Assertions.assertEquals(0xC01D, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-AES-128-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaRsaWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC01E), suite);
    Assertions.assertEquals(0xC01E, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-RSA-AES-128-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaDssWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC01F), suite);
    Assertions.assertEquals(0xC01F, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-DSS-AES-128-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC020), suite);
    Assertions.assertEquals(0xC020, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-AES-256-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaRsaWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC021), suite);
    Assertions.assertEquals(0xC021, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-RSA-AES-256-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_RSA_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSrpShaDssWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC022), suite);
    Assertions.assertEquals(0xC022, suite.getValue());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("SRP-DSS-AES-256-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_SRP_SHA_DSS_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC023), suite);
    Assertions.assertEquals(0xC023, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC024), suite);
    Assertions.assertEquals(0xC024, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC025), suite);
    Assertions.assertEquals(0xC025, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC026), suite);
    Assertions.assertEquals(0xC026, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-AES256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC027), suite);
    Assertions.assertEquals(0xC027, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC028), suite);
    Assertions.assertEquals(0xC028, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-AES256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_AES_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC029), suite);
    Assertions.assertEquals(0xC029, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-AES128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC02A), suite);
    Assertions.assertEquals(0xC02A, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-AES256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC02B), suite);
    Assertions.assertEquals(0xC02B, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC02C), suite);
    Assertions.assertEquals(0xC02C, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC02D), suite);
    Assertions.assertEquals(0xC02D, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC02E), suite);
    Assertions.assertEquals(0xC02E, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC02F), suite);
    Assertions.assertEquals(0xC02F, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_AES_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC030), suite);
    Assertions.assertEquals(0xC030, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_AES_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC031), suite);
    Assertions.assertEquals(0xC031, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-AES128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC032), suite);
    Assertions.assertEquals(0xC032, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-AES256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithRc4128Sha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_RC4_128_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC033), suite);
    Assertions.assertEquals(0xC033, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_RC4_128_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_RC4_128_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-RC4-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_ARCFOUR_128_SHA1", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWith3desEdeCbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC034), suite);
    Assertions.assertEquals(0xC034, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-3DES-EDE-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_3DES_EDE_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes128CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC035), suite);
    Assertions.assertEquals(0xC035, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-AES128-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_AES_128_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes256CbcSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC036), suite);
    Assertions.assertEquals(0xC036, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-AES256-CBC-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_AES_256_CBC_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC037), suite);
    Assertions.assertEquals(0xC037, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-AES128-CBC-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_AES_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC038), suite);
    Assertions.assertEquals(0xC038, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-AES256-CBC-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_AES_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithNullSha() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA;
    Assertions.assertEquals(CipherSuite.of(0xC039), suite);
    Assertions.assertEquals(0xC039, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_NULL_SHA", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_NULL_SHA", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-NULL-SHA", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_NULL_SHA1", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithNullSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC03A), suite);
    Assertions.assertEquals(0xC03A, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_NULL_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_NULL_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-NULL-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_NULL_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithNullSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC03B), suite);
    Assertions.assertEquals(0xC03B, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_NULL_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_NULL_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-NULL-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_NULL_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC03C), suite);
    Assertions.assertEquals(0xC03C, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC03D), suite);
    Assertions.assertEquals(0xC03D, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC03E), suite);
    Assertions.assertEquals(0xC03E, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC03F), suite);
    Assertions.assertEquals(0xC03F, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC040), suite);
    Assertions.assertEquals(0xC040, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC041), suite);
    Assertions.assertEquals(0xC041, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC042), suite);
    Assertions.assertEquals(0xC042, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC043), suite);
    Assertions.assertEquals(0xC043, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC044), suite);
    Assertions.assertEquals(0xC044, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC045), suite);
    Assertions.assertEquals(0xC045, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC046), suite);
    Assertions.assertEquals(0xC046, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC047), suite);
    Assertions.assertEquals(0xC047, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC048), suite);
    Assertions.assertEquals(0xC048, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC049), suite);
    Assertions.assertEquals(0xC049, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC04A), suite);
    Assertions.assertEquals(0xC04A, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC04B), suite);
    Assertions.assertEquals(0xC04B, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC04C), suite);
    Assertions.assertEquals(0xC04C, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC04D), suite);
    Assertions.assertEquals(0xC04D, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC04E), suite);
    Assertions.assertEquals(0xC04E, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC04F), suite);
    Assertions.assertEquals(0xC04F, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC050), suite);
    Assertions.assertEquals(0xC050, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC051), suite);
    Assertions.assertEquals(0xC051, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC052), suite);
    Assertions.assertEquals(0xC052, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC053), suite);
    Assertions.assertEquals(0xC053, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC054), suite);
    Assertions.assertEquals(0xC054, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC055), suite);
    Assertions.assertEquals(0xC055, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-RSA-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC056), suite);
    Assertions.assertEquals(0xC056, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-DSS-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC057), suite);
    Assertions.assertEquals(0xC057, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-DSS-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC058), suite);
    Assertions.assertEquals(0xC058, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC059), suite);
    Assertions.assertEquals(0xC059, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DH-DSS-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC05A), suite);
    Assertions.assertEquals(0xC05A, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC05B), suite);
    Assertions.assertEquals(0xC05B, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ADH-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC05C), suite);
    Assertions.assertEquals(0xC05C, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC05D), suite);
    Assertions.assertEquals(0xC05D, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC05E), suite);
    Assertions.assertEquals(0xC05E, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC05F), suite);
    Assertions.assertEquals(0xC05F, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC060), suite);
    Assertions.assertEquals(0xC060, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC061), suite);
    Assertions.assertEquals(0xC061, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC062), suite);
    Assertions.assertEquals(0xC062, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC063), suite);
    Assertions.assertEquals(0xC063, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC064), suite);
    Assertions.assertEquals(0xC064, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC065), suite);
    Assertions.assertEquals(0xC065, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC066), suite);
    Assertions.assertEquals(0xC066, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC067), suite);
    Assertions.assertEquals(0xC067, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC068), suite);
    Assertions.assertEquals(0xC068, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC069), suite);
    Assertions.assertEquals(0xC069, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC06A), suite);
    Assertions.assertEquals(0xC06A, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC06B), suite);
    Assertions.assertEquals(0xC06B, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC06C), suite);
    Assertions.assertEquals(0xC06C, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC06D), suite);
    Assertions.assertEquals(0xC06D, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAria128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC06E), suite);
    Assertions.assertEquals(0xC06E, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-ARIA128-GCM-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithAria256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC06F), suite);
    Assertions.assertEquals(0xC06F, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-ARIA256-GCM-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAria128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC070), suite);
    Assertions.assertEquals(0xC070, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAria256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC071), suite);
    Assertions.assertEquals(0xC071, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC072), suite);
    Assertions.assertEquals(0xC072, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC073), suite);
    Assertions.assertEquals(0xC073, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_CAMELLIA_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC074), suite);
    Assertions.assertEquals(0xC074, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC075), suite);
    Assertions.assertEquals(0xC075, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-ECDSA-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC076), suite);
    Assertions.assertEquals(0xC076, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC077), suite);
    Assertions.assertEquals(0xC077, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_CAMELLIA_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC078), suite);
    Assertions.assertEquals(0xC078, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC079), suite);
    Assertions.assertEquals(0xC079, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDH-RSA-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC07A), suite);
    Assertions.assertEquals(0xC07A, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC07B), suite);
    Assertions.assertEquals(0xC07B, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC07C), suite);
    Assertions.assertEquals(0xC07C, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC07D), suite);
    Assertions.assertEquals(0xC07D, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC07E), suite);
    Assertions.assertEquals(0xC07E, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhRsaWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC07F), suite);
    Assertions.assertEquals(0xC07F, suite.getValue());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC080), suite);
    Assertions.assertEquals(0xC080, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheDssWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC081), suite);
    Assertions.assertEquals(0xC081, suite.getValue());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_DSS_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC082), suite);
    Assertions.assertEquals(0xC082, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhDssWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC083), suite);
    Assertions.assertEquals(0xC083, suite.getValue());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC084), suite);
    Assertions.assertEquals(0xC084, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhAnonWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DH_ANON_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC085), suite);
    Assertions.assertEquals(0xC085, suite.getValue());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DH_ANON_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC086), suite);
    Assertions.assertEquals(0xC086, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC087), suite);
    Assertions.assertEquals(0xC087, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC088), suite);
    Assertions.assertEquals(0xC088, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhEcdsaWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC089), suite);
    Assertions.assertEquals(0xC089, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC08A), suite);
    Assertions.assertEquals(0xC08A, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC08B), suite);
    Assertions.assertEquals(0xC08B, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC08C), suite);
    Assertions.assertEquals(0xC08C, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhRsaWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC08D), suite);
    Assertions.assertEquals(0xC08D, suite.getValue());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC08E), suite);
    Assertions.assertEquals(0xC08E, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC08F), suite);
    Assertions.assertEquals(0xC08F, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC090), suite);
    Assertions.assertEquals(0xC090, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC091), suite);
    Assertions.assertEquals(0xC091, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithCamellia128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC092), suite);
    Assertions.assertEquals(0xC092, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_CAMELLIA_128_GCM_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithCamellia256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC093), suite);
    Assertions.assertEquals(0xC093, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_CAMELLIA_256_GCM_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC094), suite);
    Assertions.assertEquals(0xC094, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC095), suite);
    Assertions.assertEquals(0xC095, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_CAMELLIA_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC096), suite);
    Assertions.assertEquals(0xC096, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC097), suite);
    Assertions.assertEquals(0xC097, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_CAMELLIA_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC098), suite);
    Assertions.assertEquals(0xC098, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC099), suite);
    Assertions.assertEquals(0xC099, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_CAMELLIA_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithCamellia128CbcSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC09A), suite);
    Assertions.assertEquals(0xC09A, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-CAMELLIA128-SHA256", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_CAMELLIA_128_CBC_SHA256", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithCamellia256CbcSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC09B), suite);
    Assertions.assertEquals(0xC09B, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-CAMELLIA256-SHA384", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_CAMELLIA_256_CBC_SHA384", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes128Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_128_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC09C), suite);
    Assertions.assertEquals(0xC09C, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CCM", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("AES128-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_128_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes256Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_256_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC09D), suite);
    Assertions.assertEquals(0xC09D, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CCM", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("AES256-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_256_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes128Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC09E), suite);
    Assertions.assertEquals(0xC09E, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CCM", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES128-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_128_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes256Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC09F), suite);
    Assertions.assertEquals(0xC09F, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CCM", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES256-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_256_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes128Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_128_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0A0), suite);
    Assertions.assertEquals(0xC0A0, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_128_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("AES128-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_128_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaWithAes256Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_WITH_AES_256_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0A1), suite);
    Assertions.assertEquals(0xC0A1, suite.getValue());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_RSA_WITH_AES_256_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("AES256-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_AES_256_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes128Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0A2), suite);
    Assertions.assertEquals(0xC0A2, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_128_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES128-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_128_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithAes256Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0A3), suite);
    Assertions.assertEquals(0xC0A3, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_AES_256_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-RSA-AES256-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_AES_256_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes128Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_128_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC0A4), suite);
    Assertions.assertEquals(0xC0A4, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CCM", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES128-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_128_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes256Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_256_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC0A5), suite);
    Assertions.assertEquals(0xC0A5, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CCM", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES256-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_256_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes128Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_128_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC0A6), suite);
    Assertions.assertEquals(0xC0A6, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_CCM", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_128_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES128-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_128_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithAes256Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_AES_256_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC0A7), suite);
    Assertions.assertEquals(0xC0A7, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_CCM", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_AES_256_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES256-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_256_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes128Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_128_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0A8), suite);
    Assertions.assertEquals(0xC0A8, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_128_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES128-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_128_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithAes256Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_AES_256_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0A9), suite);
    Assertions.assertEquals(0xC0A9, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_AES_256_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-AES256-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_AES_256_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskDheWithAes128Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_DHE_WITH_AES_128_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0AA), suite);
    Assertions.assertEquals(0xC0AA, suite.getValue());
    Assertions.assertEquals("TLS_PSK_DHE_WITH_AES_128_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_PSK_DHE_WITH_AES_128_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES128-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_128_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskDheWithAes256Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_DHE_WITH_AES_256_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0AB), suite);
    Assertions.assertEquals(0xC0AB, suite.getValue());
    Assertions.assertEquals("TLS_PSK_DHE_WITH_AES_256_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_PSK_DHE_WITH_AES_256_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("DHE-PSK-AES256-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_AES_256_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes128Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC0AC), suite);
    Assertions.assertEquals(0xC0AC, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CCM", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES128-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_128_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes256Ccm() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM;
    Assertions.assertEquals(CipherSuite.of(0xC0AD), suite);
    Assertions.assertEquals(0xC0AD, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CCM", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CCM", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES256-CCM", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_256_CCM", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes128Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0AE), suite);
    Assertions.assertEquals(0xC0AE, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES128-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_128_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithAes256Ccm8() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8;
    Assertions.assertEquals(CipherSuite.of(0xC0AF), suite);
    Assertions.assertEquals(0xC0AF, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-AES256-CCM8", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_AES_256_CCM_8", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEccpwdWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECCPWD_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC0B0), suite);
    Assertions.assertEquals(0xC0B0, suite.getValue());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEccpwdWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECCPWD_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC0B1), suite);
    Assertions.assertEquals(0xC0B1, suite.getValue());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEccpwdWithAes128CcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECCPWD_WITH_AES_128_CCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC0B2), suite);
    Assertions.assertEquals(0xC0B2, suite.getValue());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_128_CCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_128_CCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEccpwdWithAes256CcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECCPWD_WITH_AES_256_CCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC0B3), suite);
    Assertions.assertEquals(0xC0B3, suite.getValue());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_256_CCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECCPWD_WITH_AES_256_CCM_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSha256Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SHA256_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xC0B4), suite);
    Assertions.assertEquals(0xC0B4, suite.getValue());
    Assertions.assertEquals("TLS_SHA256_SHA256", suite.getName());
    Assertions.assertEquals("TLS_SHA256_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsSha384Sha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_SHA384_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xC0B5), suite);
    Assertions.assertEquals(0xC0B5, suite.getValue());
    Assertions.assertEquals("TLS_SHA384_SHA384", suite.getName());
    Assertions.assertEquals("TLS_SHA384_SHA384", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsGostr341112256WithKuznyechikCtrOmac() throws Exception {
    CipherSuite suite = CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC;
    Assertions.assertEquals(CipherSuite.of(0xC100), suite);
    Assertions.assertEquals(0xC100, suite.getValue());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC", suite.getName());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsGostr341112256WithMagmaCtrOmac() throws Exception {
    CipherSuite suite = CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC;
    Assertions.assertEquals(CipherSuite.of(0xC101), suite);
    Assertions.assertEquals(0xC101, suite.getValue());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC", suite.getName());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsGostr341112256With28147CntImit() throws Exception {
    CipherSuite suite = CipherSuite.TLS_GOSTR341112_256_WITH_28147_CNT_IMIT;
    Assertions.assertEquals(CipherSuite.of(0xC102), suite);
    Assertions.assertEquals(0xC102, suite.getValue());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_28147_CNT_IMIT", suite.getName());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_28147_CNT_IMIT", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("TLS_GOSTR341112_256_28147_CNT_IMIT", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsGostr341112256WithKuznyechikMgmL() throws Exception {
    CipherSuite suite = CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L;
    Assertions.assertEquals(CipherSuite.of(0xC103), suite);
    Assertions.assertEquals(0xC103, suite.getValue());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L", suite.getName());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsGostr341112256WithMagmaMgmL() throws Exception {
    CipherSuite suite = CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_MGM_L;
    Assertions.assertEquals(CipherSuite.of(0xC104), suite);
    Assertions.assertEquals(0xC104, suite.getValue());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_MAGMA_MGM_L", suite.getName());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_MAGMA_MGM_L", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsGostr341112256WithKuznyechikMgmS() throws Exception {
    CipherSuite suite = CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S;
    Assertions.assertEquals(CipherSuite.of(0xC105), suite);
    Assertions.assertEquals(0xC105, suite.getValue());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S", suite.getName());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsGostr341112256WithMagmaMgmS() throws Exception {
    CipherSuite suite = CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_MGM_S;
    Assertions.assertEquals(CipherSuite.of(0xC106), suite);
    Assertions.assertEquals(0xC106, suite.getValue());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_MAGMA_MGM_S", suite.getName());
    Assertions.assertEquals("TLS_GOSTR341112_256_WITH_MAGMA_MGM_S", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(false, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheRsaWithChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xCCA8), suite);
    Assertions.assertEquals(0xCCA8, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", suite.getNss());
    Assertions.assertEquals("ECDHE-RSA-CHACHA20-POLY1305", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_RSA_CHACHA20_POLY1305", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdheEcdsaWithChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xCCA9), suite);
    Assertions.assertEquals(0xCCA9, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", suite.getNss());
    Assertions.assertEquals("ECDHE-ECDSA-CHACHA20-POLY1305", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_ECDSA_CHACHA20_POLY1305", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDheRsaWithChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xCCAA), suite);
    Assertions.assertEquals(0xCCAA, suite.getValue());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-RSA-CHACHA20-POLY1305", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_RSA_CHACHA20_POLY1305", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsPskWithChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_PSK_WITH_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xCCAB), suite);
    Assertions.assertEquals(0xCCAB, suite.getValue());
    Assertions.assertEquals("TLS_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("PSK-CHACHA20-POLY1305", suite.getOpenSsl());
    Assertions.assertEquals("TLS_PSK_CHACHA20_POLY1305", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xCCAC), suite);
    Assertions.assertEquals(0xCCAC, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getNss());
    Assertions.assertEquals("ECDHE-PSK-CHACHA20-POLY1305", suite.getOpenSsl());
    Assertions.assertEquals("TLS_ECDHE_PSK_CHACHA20_POLY1305", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsDhePskWithChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xCCAD), suite);
    Assertions.assertEquals(0xCCAD, suite.getValue());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getNss());
    Assertions.assertEquals("DHE-PSK-CHACHA20-POLY1305", suite.getOpenSsl());
    Assertions.assertEquals("TLS_DHE_PSK_CHACHA20_POLY1305", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsRsaPskWithChacha20Poly1305Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xCCAE), suite);
    Assertions.assertEquals(0xCCAE, suite.getValue());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getName());
    Assertions.assertEquals("TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("RSA-PSK-CHACHA20-POLY1305", suite.getOpenSsl());
    Assertions.assertEquals("TLS_RSA_PSK_CHACHA20_POLY1305", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes128GcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xD001), suite);
    Assertions.assertEquals(0xD001, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes256GcmSha384() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384;
    Assertions.assertEquals(CipherSuite.of(0xD002), suite);
    Assertions.assertEquals(0xD002, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384", suite.getIana());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes128Ccm8Sha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xD003), suite);
    Assertions.assertEquals(0xD003, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(false, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testStaticGetTlsEcdhePskWithAes128CcmSha256() throws Exception {
    CipherSuite suite = CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256;
    Assertions.assertEquals(CipherSuite.of(0xD005), suite);
    Assertions.assertEquals(0xD005, suite.getValue());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256", suite.getName());
    Assertions.assertEquals("TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256", suite.getIana());
    Assertions.assertEquals("", suite.getNss());
    Assertions.assertEquals("", suite.getOpenSsl());
    Assertions.assertEquals("", suite.getGnuTls());
    Assertions.assertEquals(true, suite.isDtlsOk());
    Assertions.assertEquals(true, suite.isRecommended());
    Assertions.assertEquals(false, suite.isReserved());
    Assertions.assertEquals(false, suite.isUnassigned());
    Assertions.assertEquals(false, suite.isGrease());
  }

  @Test
  public void testTestFullRange() throws Exception {
    for (int i=0x0000; i<=0xFFFF; i++) {
      Assertions.assertNotNull(CipherSuite.of(i), String.format("CipherSuite.of(0x%04X)", i));
      Assertions.assertTrue(CipherSuite.of(i) == CipherSuite.of(i));
      Assertions.assertTrue(CipherSuite.of(i) == CipherSuite.of(CipherSuite.of(i).getName()));
      Assertions.assertTrue(CipherSuite.of(CipherSuite.of(i).toString()) == CipherSuite.of(CipherSuite.of(i).getName()));
    }
  }
}
