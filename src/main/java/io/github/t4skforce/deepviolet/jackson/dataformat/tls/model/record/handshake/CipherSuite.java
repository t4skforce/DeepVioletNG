package io.github.t4skforce.deepviolet.jackson.dataformat.tls.model.record.handshake;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.t4skforce.deepviolet.jackson.dataformat.tls.annotations.TlsCipherSuite;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * <br/>This class is based on <a href="http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml">www.iana.org</a> specification and enhanced with <a href="https://hg.mozilla.org/projects/nss/raw-file/tip/lib/ssl/sslproto.h">mozilla.org</a>, <a href="https://raw.githubusercontent.com/openssl/openssl/master/include/openssl/tls1.h">OpenSSL</a> and <a href="https://gitlab.com/gnutls/gnutls/raw/master/lib/algorithms/ciphersuites.c">GnuTLS</a><strong>This class is generated by {@link io.github.t4skforce.deepviolet.generators.impl.TlsCipherSuiteCodeGenerator}.
 * DO NOT MODIFY!</strong><br/>
 *
 */
@TlsCipherSuite
class CipherSuite {
  public static final Date UPDATED = new Date(1615409887000L);

  private static final String NAME_FORMAT = "%s:(0x%04X)";

  private static final String UNASSIGNED = "UNASSIGNED";

  private static final String RESERVED = "RESERVED";

  private static final String GREASE = "GREASE";

  private static final Map<Integer, CipherSuite> VALUE_MAP = new HashMap<>();

  private static final Map<String, CipherSuite> NAME_MAP = new HashMap<>();

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_NULL_WITH_NULL_NULL<br/>
   * <strong>NSS:</strong> TLS_NULL_WITH_NULL_NULL<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_NULL_WITH_NULL_NULL = new CipherSuite(0x0000,
        "TLS_NULL_WITH_NULL_NULL",
        "TLS_NULL_WITH_NULL_NULL",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_NULL_MD5<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_NULL_MD5<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_NULL_MD5<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_NULL_MD5 = new CipherSuite(0x0001,
        "TLS_RSA_WITH_NULL_MD5",
        "TLS_RSA_WITH_NULL_MD5",
        "",
        "TLS_RSA_NULL_MD5",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_NULL_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_NULL_SHA = new CipherSuite(0x0002,
        "TLS_RSA_WITH_NULL_SHA",
        "TLS_RSA_WITH_NULL_SHA",
        "",
        "TLS_RSA_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_EXPORT_WITH_RC4_40_MD5<br/>
   * <strong>NSS:</strong> TLS_RSA_EXPORT_WITH_RC4_40_MD5<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 = new CipherSuite(0x0003,
        "TLS_RSA_EXPORT_WITH_RC4_40_MD5",
        "TLS_RSA_EXPORT_WITH_RC4_40_MD5",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_RC4_128_MD5<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_RC4_128_MD5<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_ARCFOUR_128_MD5<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_RC4_128_MD5 = new CipherSuite(0x0004,
        "TLS_RSA_WITH_RC4_128_MD5",
        "TLS_RSA_WITH_RC4_128_MD5",
        "",
        "TLS_RSA_ARCFOUR_128_MD5",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_RC4_128_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_RC4_128_SHA = new CipherSuite(0x0005,
        "TLS_RSA_WITH_RC4_128_SHA",
        "TLS_RSA_WITH_RC4_128_SHA",
        "",
        "TLS_RSA_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5<br/>
   * <strong>NSS:</strong> TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = new CipherSuite(0x0006,
        "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5",
        "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_IDEA_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_IDEA_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_IDEA_CBC_SHA = new CipherSuite(0x0007,
        "TLS_RSA_WITH_IDEA_CBC_SHA",
        "TLS_RSA_WITH_IDEA_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = new CipherSuite(0x0008,
        "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA",
        "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_DES_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_DES_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_DES_CBC_SHA = new CipherSuite(0x0009,
        "TLS_RSA_WITH_DES_CBC_SHA",
        "TLS_RSA_WITH_DES_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x000A,
        "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
        "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
        "",
        "TLS_RSA_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = new CipherSuite(0x000B,
        "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA",
        "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_DES_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_DSS_WITH_DES_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_DES_CBC_SHA = new CipherSuite(0x000C,
        "TLS_DH_DSS_WITH_DES_CBC_SHA",
        "TLS_DH_DSS_WITH_DES_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x000D,
        "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA",
        "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = new CipherSuite(0x000E,
        "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA",
        "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_DES_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_RSA_WITH_DES_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_DES_CBC_SHA = new CipherSuite(0x000F,
        "TLS_DH_RSA_WITH_DES_CBC_SHA",
        "TLS_DH_RSA_WITH_DES_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x0010,
        "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA",
        "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = new CipherSuite(0x0011,
        "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA",
        "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_DES_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_DES_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA = new CipherSuite(0x0012,
        "TLS_DHE_DSS_WITH_DES_CBC_SHA",
        "TLS_DHE_DSS_WITH_DES_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x0013,
        "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
        "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
        "",
        "TLS_DHE_DSS_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = new CipherSuite(0x0014,
        "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA",
        "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_DES_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_DES_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA = new CipherSuite(0x0015,
        "TLS_DHE_RSA_WITH_DES_CBC_SHA",
        "TLS_DHE_RSA_WITH_DES_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x0016,
        "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA",
        "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA",
        "",
        "TLS_DHE_RSA_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_EXPORT_WITH_RC4_40_MD5<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_EXPORT_WITH_RC4_40_MD5<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_EXPORT_WITH_RC4_40_MD5 = new CipherSuite(0x0017,
        "TLS_DH_anon_EXPORT_WITH_RC4_40_MD5",
        "TLS_DH_ANON_EXPORT_WITH_RC4_40_MD5",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_RC4_128_MD5<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_WITH_RC4_128_MD5<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_ARCFOUR_128_MD5<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_RC4_128_MD5 = new CipherSuite(0x0018,
        "TLS_DH_anon_WITH_RC4_128_MD5",
        "TLS_DH_ANON_WITH_RC4_128_MD5",
        "",
        "TLS_DH_ANON_ARCFOUR_128_MD5",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_EXPORT_WITH_DES40_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_EXPORT_WITH_DES40_CBC_SHA = new CipherSuite(0x0019,
        "TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA",
        "TLS_DH_ANON_EXPORT_WITH_DES40_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_DES_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_WITH_DES_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_DES_CBC_SHA = new CipherSuite(0x001A,
        "TLS_DH_anon_WITH_DES_CBC_SHA",
        "TLS_DH_ANON_WITH_DES_CBC_SHA",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x001B,
        "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA",
        "TLS_DH_ANON_WITH_3DES_EDE_CBC_SHA",
        "",
        "TLS_DH_ANON_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_DES_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_DES_CBC_SHA = new CipherSuite(0x001E,
        "TLS_KRB5_WITH_DES_CBC_SHA",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x001F,
        "TLS_KRB5_WITH_3DES_EDE_CBC_SHA",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_RC4_128_SHA = new CipherSuite(0x0020,
        "TLS_KRB5_WITH_RC4_128_SHA",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_IDEA_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_IDEA_CBC_SHA = new CipherSuite(0x0021,
        "TLS_KRB5_WITH_IDEA_CBC_SHA",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_DES_CBC_MD5<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 = new CipherSuite(0x0022,
        "TLS_KRB5_WITH_DES_CBC_MD5",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_3DES_EDE_CBC_MD5<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 = new CipherSuite(0x0023,
        "TLS_KRB5_WITH_3DES_EDE_CBC_MD5",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_RC4_128_MD5<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_RC4_128_MD5 = new CipherSuite(0x0024,
        "TLS_KRB5_WITH_RC4_128_MD5",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_WITH_IDEA_CBC_MD5<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_WITH_IDEA_CBC_MD5 = new CipherSuite(0x0025,
        "TLS_KRB5_WITH_IDEA_CBC_MD5",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA = new CipherSuite(0x0026,
        "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA = new CipherSuite(0x0027,
        "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_EXPORT_WITH_RC4_40_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA = new CipherSuite(0x0028,
        "TLS_KRB5_EXPORT_WITH_RC4_40_SHA",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 = new CipherSuite(0x0029,
        "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5 = new CipherSuite(0x002A,
        "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_KRB5_EXPORT_WITH_RC4_40_MD5<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 = new CipherSuite(0x002B,
        "TLS_KRB5_EXPORT_WITH_RC4_40_MD5",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_NULL_SHA = new CipherSuite(0x002C,
        "TLS_PSK_WITH_NULL_SHA",
        "",
        "PSK-NULL-SHA",
        "TLS_PSK_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_NULL_SHA = new CipherSuite(0x002D,
        "TLS_DHE_PSK_WITH_NULL_SHA",
        "",
        "DHE-PSK-NULL-SHA",
        "TLS_DHE_PSK_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_NULL_SHA = new CipherSuite(0x002E,
        "TLS_RSA_PSK_WITH_NULL_SHA",
        "",
        "RSA-PSK-NULL-SHA",
        "TLS_RSA_PSK_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> AES128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA = new CipherSuite(0x002F,
        "TLS_RSA_WITH_AES_128_CBC_SHA",
        "TLS_RSA_WITH_AES_128_CBC_SHA",
        "AES128-SHA",
        "TLS_RSA_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_DSS_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-DSS-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA = new CipherSuite(0x0030,
        "TLS_DH_DSS_WITH_AES_128_CBC_SHA",
        "TLS_DH_DSS_WITH_AES_128_CBC_SHA",
        "DH-DSS-AES128-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-RSA-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA = new CipherSuite(0x0031,
        "TLS_DH_RSA_WITH_AES_128_CBC_SHA",
        "TLS_DH_RSA_WITH_AES_128_CBC_SHA",
        "DH-RSA-AES128-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA = new CipherSuite(0x0032,
        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
        "DHE-DSS-AES128-SHA",
        "TLS_DHE_DSS_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA = new CipherSuite(0x0033,
        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
        "DHE-RSA-AES128-SHA",
        "TLS_DHE_RSA_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ADH-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_AES_128_CBC_SHA = new CipherSuite(0x0034,
        "TLS_DH_anon_WITH_AES_128_CBC_SHA",
        "TLS_DH_ANON_WITH_AES_128_CBC_SHA",
        "ADH-AES128-SHA",
        "TLS_DH_ANON_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> AES256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA = new CipherSuite(0x0035,
        "TLS_RSA_WITH_AES_256_CBC_SHA",
        "TLS_RSA_WITH_AES_256_CBC_SHA",
        "AES256-SHA",
        "TLS_RSA_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_DSS_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-DSS-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA = new CipherSuite(0x0036,
        "TLS_DH_DSS_WITH_AES_256_CBC_SHA",
        "TLS_DH_DSS_WITH_AES_256_CBC_SHA",
        "DH-DSS-AES256-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-RSA-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA = new CipherSuite(0x0037,
        "TLS_DH_RSA_WITH_AES_256_CBC_SHA",
        "TLS_DH_RSA_WITH_AES_256_CBC_SHA",
        "DH-RSA-AES256-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA = new CipherSuite(0x0038,
        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
        "DHE-DSS-AES256-SHA",
        "TLS_DHE_DSS_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA = new CipherSuite(0x0039,
        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
        "DHE-RSA-AES256-SHA",
        "TLS_DHE_RSA_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ADH-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_AES_256_CBC_SHA = new CipherSuite(0x003A,
        "TLS_DH_anon_WITH_AES_256_CBC_SHA",
        "TLS_DH_ANON_WITH_AES_256_CBC_SHA",
        "ADH-AES256-SHA",
        "TLS_DH_ANON_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_NULL_SHA256<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_NULL_SHA256<br/>
   * <strong>OpenSSL:</strong> NULL-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_NULL_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_NULL_SHA256 = new CipherSuite(0x003B,
        "TLS_RSA_WITH_NULL_SHA256",
        "TLS_RSA_WITH_NULL_SHA256",
        "NULL-SHA256",
        "TLS_RSA_NULL_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x003C,
        "TLS_RSA_WITH_AES_128_CBC_SHA256",
        "TLS_RSA_WITH_AES_128_CBC_SHA256",
        "AES128-SHA256",
        "TLS_RSA_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_AES_256_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> AES256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 = new CipherSuite(0x003D,
        "TLS_RSA_WITH_AES_256_CBC_SHA256",
        "TLS_RSA_WITH_AES_256_CBC_SHA256",
        "AES256-SHA256",
        "TLS_RSA_AES_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x003E,
        "TLS_DH_DSS_WITH_AES_128_CBC_SHA256",
        "",
        "DH-DSS-AES128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x003F,
        "TLS_DH_RSA_WITH_AES_128_CBC_SHA256",
        "",
        "DH-RSA-AES128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x0040,
        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
        "DHE-DSS-AES128-SHA256",
        "TLS_DHE_DSS_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> CAMELLIA128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_CAMELLIA_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = new CipherSuite(0x0041,
        "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA",
        "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA",
        "CAMELLIA128-SHA",
        "TLS_RSA_CAMELLIA_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-DSS-CAMELLIA128-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = new CipherSuite(0x0042,
        "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA",
        "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA",
        "DH-DSS-CAMELLIA128-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-RSA-CAMELLIA128-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = new CipherSuite(0x0043,
        "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA",
        "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA",
        "DH-RSA-CAMELLIA128-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-CAMELLIA128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_CAMELLIA_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = new CipherSuite(0x0044,
        "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA",
        "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA",
        "DHE-DSS-CAMELLIA128-SHA",
        "TLS_DHE_DSS_CAMELLIA_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-CAMELLIA128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_CAMELLIA_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = new CipherSuite(0x0045,
        "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA",
        "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA",
        "DHE-RSA-CAMELLIA128-SHA",
        "TLS_DHE_RSA_CAMELLIA_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ADH-CAMELLIA128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_CAMELLIA_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA = new CipherSuite(0x0046,
        "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA",
        "TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA",
        "ADH-CAMELLIA128-SHA",
        "TLS_DH_ANON_CAMELLIA_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x0067,
        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
        "DHE-RSA-AES128-SHA256",
        "TLS_DHE_RSA_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_AES_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-AES256-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = new CipherSuite(0x0068,
        "TLS_DH_DSS_WITH_AES_256_CBC_SHA256",
        "",
        "DH-DSS-AES256-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_AES_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-AES256-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = new CipherSuite(0x0069,
        "TLS_DH_RSA_WITH_AES_256_CBC_SHA256",
        "",
        "DH-RSA-AES256-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-AES256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_AES_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = new CipherSuite(0x006A,
        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
        "DHE-DSS-AES256-SHA256",
        "TLS_DHE_DSS_AES_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = new CipherSuite(0x006B,
        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
        "DHE-RSA-AES256-SHA256",
        "TLS_DHE_RSA_AES_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x006C,
        "TLS_DH_anon_WITH_AES_128_CBC_SHA256",
        "",
        "ADH-AES128-SHA256",
        "TLS_DH_ANON_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_AES_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-AES256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_AES_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_AES_256_CBC_SHA256 = new CipherSuite(0x006D,
        "TLS_DH_anon_WITH_AES_256_CBC_SHA256",
        "",
        "ADH-AES256-SHA256",
        "TLS_DH_ANON_AES_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> CAMELLIA256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_CAMELLIA_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = new CipherSuite(0x0084,
        "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA",
        "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA",
        "CAMELLIA256-SHA",
        "TLS_RSA_CAMELLIA_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-DSS-CAMELLIA256-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = new CipherSuite(0x0085,
        "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA",
        "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA",
        "DH-DSS-CAMELLIA256-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DH-RSA-CAMELLIA256-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = new CipherSuite(0x0086,
        "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA",
        "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA",
        "DH-RSA-CAMELLIA256-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-CAMELLIA256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_CAMELLIA_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = new CipherSuite(0x0087,
        "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA",
        "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA",
        "DHE-DSS-CAMELLIA256-SHA",
        "TLS_DHE_DSS_CAMELLIA_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-CAMELLIA256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_CAMELLIA_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = new CipherSuite(0x0088,
        "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA",
        "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA",
        "DHE-RSA-CAMELLIA256-SHA",
        "TLS_DHE_RSA_CAMELLIA_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ADH-CAMELLIA256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_CAMELLIA_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA = new CipherSuite(0x0089,
        "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA",
        "TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA",
        "ADH-CAMELLIA256-SHA",
        "TLS_DH_ANON_CAMELLIA_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_RC4_128_SHA = new CipherSuite(0x008A,
        "TLS_PSK_WITH_RC4_128_SHA",
        "",
        "PSK-RC4-SHA",
        "TLS_PSK_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-3DES-EDE-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x008B,
        "TLS_PSK_WITH_3DES_EDE_CBC_SHA",
        "",
        "PSK-3DES-EDE-CBC-SHA",
        "TLS_PSK_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES128-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA = new CipherSuite(0x008C,
        "TLS_PSK_WITH_AES_128_CBC_SHA",
        "",
        "PSK-AES128-CBC-SHA",
        "TLS_PSK_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES256-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA = new CipherSuite(0x008D,
        "TLS_PSK_WITH_AES_256_CBC_SHA",
        "",
        "PSK-AES256-CBC-SHA",
        "TLS_PSK_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_RC4_128_SHA = new CipherSuite(0x008E,
        "TLS_DHE_PSK_WITH_RC4_128_SHA",
        "",
        "DHE-PSK-RC4-SHA",
        "TLS_DHE_PSK_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-3DES-EDE-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x008F,
        "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA",
        "",
        "DHE-PSK-3DES-EDE-CBC-SHA",
        "TLS_DHE_PSK_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES128-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_128_CBC_SHA = new CipherSuite(0x0090,
        "TLS_DHE_PSK_WITH_AES_128_CBC_SHA",
        "",
        "DHE-PSK-AES128-CBC-SHA",
        "TLS_DHE_PSK_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES256-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_256_CBC_SHA = new CipherSuite(0x0091,
        "TLS_DHE_PSK_WITH_AES_256_CBC_SHA",
        "",
        "DHE-PSK-AES256-CBC-SHA",
        "TLS_DHE_PSK_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_RC4_128_SHA = new CipherSuite(0x0092,
        "TLS_RSA_PSK_WITH_RC4_128_SHA",
        "",
        "RSA-PSK-RC4-SHA",
        "TLS_RSA_PSK_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-3DES-EDE-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0x0093,
        "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA",
        "",
        "RSA-PSK-3DES-EDE-CBC-SHA",
        "TLS_RSA_PSK_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-AES128-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_AES_128_CBC_SHA = new CipherSuite(0x0094,
        "TLS_RSA_PSK_WITH_AES_128_CBC_SHA",
        "",
        "RSA-PSK-AES128-CBC-SHA",
        "TLS_RSA_PSK_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-AES256-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_AES_256_CBC_SHA = new CipherSuite(0x0095,
        "TLS_RSA_PSK_WITH_AES_256_CBC_SHA",
        "",
        "RSA-PSK-AES256-CBC-SHA",
        "TLS_RSA_PSK_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_SEED_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_SEED_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> SEED-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_SEED_CBC_SHA = new CipherSuite(0x0096,
        "TLS_RSA_WITH_SEED_CBC_SHA",
        "TLS_RSA_WITH_SEED_CBC_SHA",
        "SEED-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_SEED_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-SEED-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_SEED_CBC_SHA = new CipherSuite(0x0097,
        "TLS_DH_DSS_WITH_SEED_CBC_SHA",
        "",
        "DH-DSS-SEED-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_SEED_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-SEED-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_SEED_CBC_SHA = new CipherSuite(0x0098,
        "TLS_DH_RSA_WITH_SEED_CBC_SHA",
        "",
        "DH-RSA-SEED-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_SEED_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-DSS-SEED-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_SEED_CBC_SHA = new CipherSuite(0x0099,
        "TLS_DHE_DSS_WITH_SEED_CBC_SHA",
        "",
        "DHE-DSS-SEED-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_SEED_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-SEED-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_SEED_CBC_SHA = new CipherSuite(0x009A,
        "TLS_DHE_RSA_WITH_SEED_CBC_SHA",
        "",
        "DHE-RSA-SEED-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_SEED_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-SEED-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_SEED_CBC_SHA = new CipherSuite(0x009B,
        "TLS_DH_anon_WITH_SEED_CBC_SHA",
        "",
        "ADH-SEED-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x009C,
        "TLS_RSA_WITH_AES_128_GCM_SHA256",
        "TLS_RSA_WITH_AES_128_GCM_SHA256",
        "AES128-GCM-SHA256",
        "TLS_RSA_AES_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x009D,
        "TLS_RSA_WITH_AES_256_GCM_SHA384",
        "TLS_RSA_WITH_AES_256_GCM_SHA384",
        "AES256-GCM-SHA384",
        "TLS_RSA_AES_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x009E,
        "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
        "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
        "DHE-RSA-AES128-GCM-SHA256",
        "TLS_DHE_RSA_AES_128_GCM_SHA256",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x009F,
        "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
        "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
        "DHE-RSA-AES256-GCM-SHA384",
        "TLS_DHE_RSA_AES_256_GCM_SHA384",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x00A0,
        "TLS_DH_RSA_WITH_AES_128_GCM_SHA256",
        "",
        "DH-RSA-AES128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x00A1,
        "TLS_DH_RSA_WITH_AES_256_GCM_SHA384",
        "",
        "DH-RSA-AES256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x00A2,
        "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256",
        "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256",
        "DHE-DSS-AES128-GCM-SHA256",
        "TLS_DHE_DSS_AES_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> DHE-DSS-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x00A3,
        "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384",
        "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384",
        "DHE-DSS-AES256-GCM-SHA384",
        "TLS_DHE_DSS_AES_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x00A4,
        "TLS_DH_DSS_WITH_AES_128_GCM_SHA256",
        "",
        "DH-DSS-AES128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x00A5,
        "TLS_DH_DSS_WITH_AES_256_GCM_SHA384",
        "",
        "DH-DSS-AES256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x00A6,
        "TLS_DH_anon_WITH_AES_128_GCM_SHA256",
        "",
        "ADH-AES128-GCM-SHA256",
        "TLS_DH_ANON_AES_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x00A7,
        "TLS_DH_anon_WITH_AES_256_GCM_SHA384",
        "",
        "ADH-AES256-GCM-SHA384",
        "TLS_DH_ANON_AES_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x00A8,
        "TLS_PSK_WITH_AES_128_GCM_SHA256",
        "",
        "PSK-AES128-GCM-SHA256",
        "TLS_PSK_AES_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x00A9,
        "TLS_PSK_WITH_AES_256_GCM_SHA384",
        "",
        "PSK-AES256-GCM-SHA384",
        "TLS_PSK_AES_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_PSK_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x00AA,
        "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256",
        "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256",
        "DHE-PSK-AES128-GCM-SHA256",
        "TLS_DHE_PSK_AES_128_GCM_SHA256",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_DHE_PSK_WITH_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x00AB,
        "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384",
        "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384",
        "DHE-PSK-AES256-GCM-SHA384",
        "TLS_DHE_PSK_AES_256_GCM_SHA384",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = new CipherSuite(0x00AC,
        "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256",
        "",
        "RSA-PSK-AES128-GCM-SHA256",
        "TLS_RSA_PSK_AES_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = new CipherSuite(0x00AD,
        "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384",
        "",
        "RSA-PSK-AES256-GCM-SHA384",
        "TLS_RSA_PSK_AES_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES128-CBC-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x00AE,
        "TLS_PSK_WITH_AES_128_CBC_SHA256",
        "",
        "PSK-AES128-CBC-SHA256",
        "TLS_PSK_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES256-CBC-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA384 = new CipherSuite(0x00AF,
        "TLS_PSK_WITH_AES_256_CBC_SHA384",
        "",
        "PSK-AES256-CBC-SHA384",
        "TLS_PSK_AES_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_NULL_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-NULL-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_NULL_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_NULL_SHA256 = new CipherSuite(0x00B0,
        "TLS_PSK_WITH_NULL_SHA256",
        "",
        "PSK-NULL-SHA256",
        "TLS_PSK_NULL_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_NULL_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-NULL-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_NULL_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_NULL_SHA384 = new CipherSuite(0x00B1,
        "TLS_PSK_WITH_NULL_SHA384",
        "",
        "PSK-NULL-SHA384",
        "TLS_PSK_NULL_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES128-CBC-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x00B2,
        "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256",
        "",
        "DHE-PSK-AES128-CBC-SHA256",
        "TLS_DHE_PSK_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES256-CBC-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = new CipherSuite(0x00B3,
        "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384",
        "",
        "DHE-PSK-AES256-CBC-SHA384",
        "TLS_DHE_PSK_AES_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_NULL_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-NULL-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_NULL_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_NULL_SHA256 = new CipherSuite(0x00B4,
        "TLS_DHE_PSK_WITH_NULL_SHA256",
        "",
        "DHE-PSK-NULL-SHA256",
        "TLS_DHE_PSK_NULL_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_NULL_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-NULL-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_NULL_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_NULL_SHA384 = new CipherSuite(0x00B5,
        "TLS_DHE_PSK_WITH_NULL_SHA384",
        "",
        "DHE-PSK-NULL-SHA384",
        "TLS_DHE_PSK_NULL_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-AES128-CBC-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = new CipherSuite(0x00B6,
        "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256",
        "",
        "RSA-PSK-AES128-CBC-SHA256",
        "TLS_RSA_PSK_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-AES256-CBC-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_AES_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = new CipherSuite(0x00B7,
        "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384",
        "",
        "RSA-PSK-AES256-CBC-SHA384",
        "TLS_RSA_PSK_AES_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_NULL_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-NULL-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_NULL_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_NULL_SHA256 = new CipherSuite(0x00B8,
        "TLS_RSA_PSK_WITH_NULL_SHA256",
        "",
        "RSA-PSK-NULL-SHA256",
        "TLS_RSA_PSK_NULL_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_NULL_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-NULL-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_NULL_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_NULL_SHA384 = new CipherSuite(0x00B9,
        "TLS_RSA_PSK_WITH_NULL_SHA384",
        "",
        "RSA-PSK-NULL-SHA384",
        "TLS_RSA_PSK_NULL_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0x00BA,
        "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "CAMELLIA128-SHA256",
        "TLS_RSA_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0x00BB,
        "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "DH-DSS-CAMELLIA128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0x00BC,
        "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "DH-RSA-CAMELLIA128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-DSS-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0x00BD,
        "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "DHE-DSS-CAMELLIA128-SHA256",
        "TLS_DHE_DSS_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0x00BE,
        "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "DHE-RSA-CAMELLIA128-SHA256",
        "TLS_DHE_RSA_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0x00BF,
        "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "ADH-CAMELLIA128-SHA256",
        "TLS_DH_ANON_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> CAMELLIA256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new CipherSuite(0x00C0,
        "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256",
        "",
        "CAMELLIA256-SHA256",
        "TLS_RSA_CAMELLIA_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-CAMELLIA256-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = new CipherSuite(0x00C1,
        "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256",
        "",
        "DH-DSS-CAMELLIA256-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-CAMELLIA256-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new CipherSuite(0x00C2,
        "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256",
        "",
        "DH-RSA-CAMELLIA256-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-DSS-CAMELLIA256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = new CipherSuite(0x00C3,
        "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256",
        "",
        "DHE-DSS-CAMELLIA256-SHA256",
        "TLS_DHE_DSS_CAMELLIA_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-CAMELLIA256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new CipherSuite(0x00C4,
        "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256",
        "",
        "DHE-RSA-CAMELLIA256-SHA256",
        "TLS_DHE_RSA_CAMELLIA_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-CAMELLIA256-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_CAMELLIA_256_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA256 = new CipherSuite(0x00C5,
        "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256",
        "",
        "ADH-CAMELLIA256-SHA256",
        "TLS_DH_ANON_CAMELLIA_256_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SM4_GCM_SM3<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SM4_GCM_SM3 = new CipherSuite(0x00C6,
        "TLS_SM4_GCM_SM3",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SM4_CCM_SM3<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SM4_CCM_SM3 = new CipherSuite(0x00C7,
        "TLS_SM4_CCM_SM3",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_EMPTY_RENEGOTIATION_INFO_SCSV<br/>
   * <strong>NSS:</strong> TLS_EMPTY_RENEGOTIATION_INFO_SCSV<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV = new CipherSuite(0x00FF,
        "TLS_EMPTY_RENEGOTIATION_INFO_SCSV",
        "TLS_EMPTY_RENEGOTIATION_INFO_SCSV",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> null<br/>
   * <strong>GnuTLS:</strong> TLS_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_AES_128_GCM_SHA256 = new CipherSuite(0x1301,
        "TLS_AES_128_GCM_SHA256",
        "TLS_AES_128_GCM_SHA256",
        null,
        "TLS_AES_128_GCM_SHA256",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> null<br/>
   * <strong>GnuTLS:</strong> TLS_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_AES_256_GCM_SHA384 = new CipherSuite(0x1302,
        "TLS_AES_256_GCM_SHA384",
        "TLS_AES_256_GCM_SHA384",
        null,
        "TLS_AES_256_GCM_SHA384",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> TLS_CHACHA20_POLY1305_SHA256<br/>
   * <strong>OpenSSL:</strong> null<br/>
   * <strong>GnuTLS:</strong> TLS_CHACHA20_POLY1305_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_CHACHA20_POLY1305_SHA256 = new CipherSuite(0x1303,
        "TLS_CHACHA20_POLY1305_SHA256",
        "TLS_CHACHA20_POLY1305_SHA256",
        null,
        "TLS_CHACHA20_POLY1305_SHA256",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_AES_128_CCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> null<br/>
   * <strong>GnuTLS:</strong> TLS_AES_128_CCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_AES_128_CCM_SHA256 = new CipherSuite(0x1304,
        "TLS_AES_128_CCM_SHA256",
        "",
        null,
        "TLS_AES_128_CCM_SHA256",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_AES_128_CCM_8_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> null<br/>
   * <strong>GnuTLS:</strong> TLS_AES_128_CCM_8_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_AES_128_CCM_8_SHA256 = new CipherSuite(0x1305,
        "TLS_AES_128_CCM_8_SHA256",
        "",
        null,
        "TLS_AES_128_CCM_8_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_FALLBACK_SCSV<br/>
   * <strong>NSS:</strong> TLS_FALLBACK_SCSV<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_FALLBACK_SCSV = new CipherSuite(0x5600,
        "TLS_FALLBACK_SCSV",
        "TLS_FALLBACK_SCSV",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ECDSA_WITH_NULL_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA = new CipherSuite(0xC001,
        "TLS_ECDH_ECDSA_WITH_NULL_SHA",
        "TLS_ECDH_ECDSA_WITH_NULL_SHA",
        "ECDH-ECDSA-NULL-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ECDSA_WITH_RC4_128_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA = new CipherSuite(0xC002,
        "TLS_ECDH_ECDSA_WITH_RC4_128_SHA",
        "TLS_ECDH_ECDSA_WITH_RC4_128_SHA",
        "ECDH-ECDSA-RC4-SHA",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-DES-CBC3-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC003,
        "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA",
        "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA",
        "ECDH-ECDSA-DES-CBC3-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = new CipherSuite(0xC004,
        "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
        "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
        "ECDH-ECDSA-AES128-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = new CipherSuite(0xC005,
        "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
        "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
        "ECDH-ECDSA-AES256-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_NULL_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA = new CipherSuite(0xC006,
        "TLS_ECDHE_ECDSA_WITH_NULL_SHA",
        "TLS_ECDHE_ECDSA_WITH_NULL_SHA",
        "ECDHE-ECDSA-NULL-SHA",
        "TLS_ECDHE_ECDSA_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = new CipherSuite(0xC007,
        "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",
        "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",
        "ECDHE-ECDSA-RC4-SHA",
        "TLS_ECDHE_ECDSA_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-DES-CBC3-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC008,
        "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
        "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
        "ECDHE-ECDSA-DES-CBC3-SHA",
        "TLS_ECDHE_ECDSA_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = new CipherSuite(0xC009,
        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
        "ECDHE-ECDSA-AES128-SHA",
        "TLS_ECDHE_ECDSA_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = new CipherSuite(0xC00A,
        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
        "ECDHE-ECDSA-AES256-SHA",
        "TLS_ECDHE_ECDSA_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_RSA_WITH_NULL_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA = new CipherSuite(0xC00B,
        "TLS_ECDH_RSA_WITH_NULL_SHA",
        "TLS_ECDH_RSA_WITH_NULL_SHA",
        "ECDH-RSA-NULL-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_RSA_WITH_RC4_128_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA = new CipherSuite(0xC00C,
        "TLS_ECDH_RSA_WITH_RC4_128_SHA",
        "TLS_ECDH_RSA_WITH_RC4_128_SHA",
        "ECDH-RSA-RC4-SHA",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-DES-CBC3-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC00D,
        "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA",
        "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA",
        "ECDH-RSA-DES-CBC3-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = new CipherSuite(0xC00E,
        "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
        "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
        "ECDH-RSA-AES128-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = new CipherSuite(0xC00F,
        "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
        "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
        "ECDH-RSA-AES256-SHA",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_NULL_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA = new CipherSuite(0xC010,
        "TLS_ECDHE_RSA_WITH_NULL_SHA",
        "TLS_ECDHE_RSA_WITH_NULL_SHA",
        "ECDHE-RSA-NULL-SHA",
        "TLS_ECDHE_RSA_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_RC4_128_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA = new CipherSuite(0xC011,
        "TLS_ECDHE_RSA_WITH_RC4_128_SHA",
        "TLS_ECDHE_RSA_WITH_RC4_128_SHA",
        "ECDHE-RSA-RC4-SHA",
        "TLS_ECDHE_RSA_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-DES-CBC3-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC012,
        "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
        "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
        "ECDHE-RSA-DES-CBC3-SHA",
        "TLS_ECDHE_RSA_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = new CipherSuite(0xC013,
        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
        "ECDHE-RSA-AES128-SHA",
        "TLS_ECDHE_RSA_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = new CipherSuite(0xC014,
        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
        "ECDHE-RSA-AES256-SHA",
        "TLS_ECDHE_RSA_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_anon_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ANON_WITH_NULL_SHA<br/>
   * <strong>OpenSSL:</strong> AECDH-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDH_ANON_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ANON_WITH_NULL_SHA = new CipherSuite(0xC015,
        "TLS_ECDH_anon_WITH_NULL_SHA",
        "TLS_ECDH_ANON_WITH_NULL_SHA",
        "AECDH-NULL-SHA",
        "TLS_ECDH_ANON_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_anon_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ANON_WITH_RC4_128_SHA<br/>
   * <strong>OpenSSL:</strong> AECDH-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDH_ANON_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ANON_WITH_RC4_128_SHA = new CipherSuite(0xC016,
        "TLS_ECDH_anon_WITH_RC4_128_SHA",
        "TLS_ECDH_ANON_WITH_RC4_128_SHA",
        "AECDH-RC4-SHA",
        "TLS_ECDH_ANON_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ANON_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> AECDH-DES-CBC3-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDH_ANON_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ANON_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC017,
        "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA",
        "TLS_ECDH_ANON_WITH_3DES_EDE_CBC_SHA",
        "AECDH-DES-CBC3-SHA",
        "TLS_ECDH_ANON_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_anon_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ANON_WITH_AES_128_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> AECDH-AES128-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDH_ANON_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ANON_WITH_AES_128_CBC_SHA = new CipherSuite(0xC018,
        "TLS_ECDH_anon_WITH_AES_128_CBC_SHA",
        "TLS_ECDH_ANON_WITH_AES_128_CBC_SHA",
        "AECDH-AES128-SHA",
        "TLS_ECDH_ANON_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_anon_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> TLS_ECDH_ANON_WITH_AES_256_CBC_SHA<br/>
   * <strong>OpenSSL:</strong> AECDH-AES256-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDH_ANON_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ANON_WITH_AES_256_CBC_SHA = new CipherSuite(0xC019,
        "TLS_ECDH_anon_WITH_AES_256_CBC_SHA",
        "TLS_ECDH_ANON_WITH_AES_256_CBC_SHA",
        "AECDH-AES256-SHA",
        "TLS_ECDH_ANON_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-3DES-EDE-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC01A,
        "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA",
        "",
        "SRP-3DES-EDE-CBC-SHA",
        "TLS_SRP_SHA_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-RSA-3DES-EDE-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_RSA_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC01B,
        "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA",
        "",
        "SRP-RSA-3DES-EDE-CBC-SHA",
        "TLS_SRP_SHA_RSA_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-DSS-3DES-EDE-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_DSS_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC01C,
        "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA",
        "",
        "SRP-DSS-3DES-EDE-CBC-SHA",
        "TLS_SRP_SHA_DSS_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-AES-128-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_WITH_AES_128_CBC_SHA = new CipherSuite(0xC01D,
        "TLS_SRP_SHA_WITH_AES_128_CBC_SHA",
        "",
        "SRP-AES-128-CBC-SHA",
        "TLS_SRP_SHA_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-RSA-AES-128-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_RSA_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = new CipherSuite(0xC01E,
        "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA",
        "",
        "SRP-RSA-AES-128-CBC-SHA",
        "TLS_SRP_SHA_RSA_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-DSS-AES-128-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_DSS_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = new CipherSuite(0xC01F,
        "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA",
        "",
        "SRP-DSS-AES-128-CBC-SHA",
        "TLS_SRP_SHA_DSS_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-AES-256-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_WITH_AES_256_CBC_SHA = new CipherSuite(0xC020,
        "TLS_SRP_SHA_WITH_AES_256_CBC_SHA",
        "",
        "SRP-AES-256-CBC-SHA",
        "TLS_SRP_SHA_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-RSA-AES-256-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_RSA_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = new CipherSuite(0xC021,
        "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA",
        "",
        "SRP-RSA-AES-256-CBC-SHA",
        "TLS_SRP_SHA_RSA_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> SRP-DSS-AES-256-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_SRP_SHA_DSS_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = new CipherSuite(0xC022,
        "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA",
        "",
        "SRP-DSS-AES-256-CBC-SHA",
        "TLS_SRP_SHA_DSS_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = new CipherSuite(0xC023,
        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
        "ECDHE-ECDSA-AES128-SHA256",
        "TLS_ECDHE_ECDSA_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = new CipherSuite(0xC024,
        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
        "ECDHE-ECDSA-AES256-SHA384",
        "TLS_ECDHE_ECDSA_AES_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = new CipherSuite(0xC025,
        "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
        "",
        "ECDH-ECDSA-AES128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-AES256-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = new CipherSuite(0xC026,
        "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
        "",
        "ECDH-ECDSA-AES256-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = new CipherSuite(0xC027,
        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
        "ECDHE-RSA-AES128-SHA256",
        "TLS_ECDHE_RSA_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-AES256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_AES_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = new CipherSuite(0xC028,
        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
        "ECDHE-RSA-AES256-SHA384",
        "TLS_ECDHE_RSA_AES_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-AES128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = new CipherSuite(0xC029,
        "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
        "",
        "ECDH-RSA-AES128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-AES256-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = new CipherSuite(0xC02A,
        "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
        "",
        "ECDH-RSA-AES256-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = new CipherSuite(0xC02B,
        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
        "ECDHE-ECDSA-AES128-GCM-SHA256",
        "TLS_ECDHE_ECDSA_AES_128_GCM_SHA256",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = new CipherSuite(0xC02C,
        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
        "ECDHE-ECDSA-AES256-GCM-SHA384",
        "TLS_ECDHE_ECDSA_AES_256_GCM_SHA384",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = new CipherSuite(0xC02D,
        "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
        "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
        "ECDH-ECDSA-AES128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = new CipherSuite(0xC02E,
        "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
        "",
        "ECDH-ECDSA-AES256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_AES_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = new CipherSuite(0xC02F,
        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
        "ECDHE-RSA-AES128-GCM-SHA256",
        "TLS_ECDHE_RSA_AES_128_GCM_SHA256",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_AES_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = new CipherSuite(0xC030,
        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
        "ECDHE-RSA-AES256-GCM-SHA384",
        "TLS_ECDHE_RSA_AES_256_GCM_SHA384",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-AES128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = new CipherSuite(0xC031,
        "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
        "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
        "ECDH-RSA-AES128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-AES256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = new CipherSuite(0xC032,
        "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
        "",
        "ECDH-RSA-AES256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_RC4_128_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-RC4-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_ARCFOUR_128_SHA1<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_RC4_128_SHA = new CipherSuite(0xC033,
        "TLS_ECDHE_PSK_WITH_RC4_128_SHA",
        "",
        "ECDHE-PSK-RC4-SHA",
        "TLS_ECDHE_PSK_ARCFOUR_128_SHA1",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-3DES-EDE-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_3DES_EDE_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = new CipherSuite(0xC034,
        "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA",
        "",
        "ECDHE-PSK-3DES-EDE-CBC-SHA",
        "TLS_ECDHE_PSK_3DES_EDE_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-AES128-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_AES_128_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = new CipherSuite(0xC035,
        "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA",
        "",
        "ECDHE-PSK-AES128-CBC-SHA",
        "TLS_ECDHE_PSK_AES_128_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-AES256-CBC-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_AES_256_CBC_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = new CipherSuite(0xC036,
        "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA",
        "",
        "ECDHE-PSK-AES256-CBC-SHA",
        "TLS_ECDHE_PSK_AES_256_CBC_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-AES128-CBC-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_AES_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = new CipherSuite(0xC037,
        "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256",
        "",
        "ECDHE-PSK-AES128-CBC-SHA256",
        "TLS_ECDHE_PSK_AES_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-AES256-CBC-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_AES_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = new CipherSuite(0xC038,
        "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384",
        "",
        "ECDHE-PSK-AES256-CBC-SHA384",
        "TLS_ECDHE_PSK_AES_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_NULL_SHA<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-NULL-SHA<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_NULL_SHA1<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA = new CipherSuite(0xC039,
        "TLS_ECDHE_PSK_WITH_NULL_SHA",
        "",
        "ECDHE-PSK-NULL-SHA",
        "TLS_ECDHE_PSK_NULL_SHA1",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_NULL_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-NULL-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_NULL_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA256 = new CipherSuite(0xC03A,
        "TLS_ECDHE_PSK_WITH_NULL_SHA256",
        "",
        "ECDHE-PSK-NULL-SHA256",
        "TLS_ECDHE_PSK_NULL_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_NULL_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-NULL-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_NULL_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA384 = new CipherSuite(0xC03B,
        "TLS_ECDHE_PSK_WITH_NULL_SHA384",
        "",
        "ECDHE-PSK-NULL-SHA384",
        "TLS_ECDHE_PSK_NULL_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC03C,
        "TLS_RSA_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC03D,
        "TLS_RSA_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC03E,
        "TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC03F,
        "TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC040,
        "TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC041,
        "TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC042,
        "TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC043,
        "TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC044,
        "TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC045,
        "TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC046,
        "TLS_DH_anon_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC047,
        "TLS_DH_anon_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC048,
        "TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC049,
        "TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC04A,
        "TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC04B,
        "TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC04C,
        "TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC04D,
        "TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC04E,
        "TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC04F,
        "TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC050,
        "TLS_RSA_WITH_ARIA_128_GCM_SHA256",
        "",
        "ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC051,
        "TLS_RSA_WITH_ARIA_256_GCM_SHA384",
        "",
        "ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC052,
        "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256",
        "",
        "DHE-RSA-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC053,
        "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384",
        "",
        "DHE-RSA-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC054,
        "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256",
        "",
        "DH-RSA-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-RSA-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC055,
        "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384",
        "",
        "DH-RSA-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-DSS-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC056,
        "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256",
        "",
        "DHE-DSS-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-DSS-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC057,
        "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384",
        "",
        "DHE-DSS-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC058,
        "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256",
        "",
        "DH-DSS-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DH-DSS-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC059,
        "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384",
        "",
        "DH-DSS-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC05A,
        "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256",
        "",
        "ADH-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ADH-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC05B,
        "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384",
        "",
        "ADH-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC05C,
        "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256",
        "",
        "ECDHE-ECDSA-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC05D,
        "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384",
        "",
        "ECDHE-ECDSA-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC05E,
        "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256",
        "",
        "ECDH-ECDSA-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC05F,
        "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384",
        "",
        "ECDH-ECDSA-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC060,
        "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256",
        "",
        "ECDHE-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC061,
        "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384",
        "",
        "ECDHE-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC062,
        "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256",
        "",
        "ECDH-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC063,
        "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384",
        "",
        "ECDH-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC064,
        "TLS_PSK_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC065,
        "TLS_PSK_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC066,
        "TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC067,
        "TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC068,
        "TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC069,
        "TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC06A,
        "TLS_PSK_WITH_ARIA_128_GCM_SHA256",
        "",
        "PSK-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC06B,
        "TLS_PSK_WITH_ARIA_256_GCM_SHA384",
        "",
        "PSK-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC06C,
        "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256",
        "",
        "DHE-PSK-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC06D,
        "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384",
        "",
        "DHE-PSK-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-ARIA128-GCM-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = new CipherSuite(0xC06E,
        "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256",
        "",
        "RSA-PSK-ARIA128-GCM-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-ARIA256-GCM-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = new CipherSuite(0xC06F,
        "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384",
        "",
        "RSA-PSK-ARIA256-GCM-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 = new CipherSuite(0xC070,
        "TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 = new CipherSuite(0xC071,
        "TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC072,
        "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "ECDHE-ECDSA-CAMELLIA128-SHA256",
        "TLS_ECDHE_ECDSA_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC073,
        "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "ECDHE-ECDSA-CAMELLIA256-SHA384",
        "TLS_ECDHE_ECDSA_CAMELLIA_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC074,
        "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "ECDH-ECDSA-CAMELLIA128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-ECDSA-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC075,
        "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "ECDH-ECDSA-CAMELLIA256-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC076,
        "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "ECDHE-RSA-CAMELLIA128-SHA256",
        "TLS_ECDHE_RSA_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC077,
        "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "ECDHE-RSA-CAMELLIA256-SHA384",
        "TLS_ECDHE_RSA_CAMELLIA_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC078,
        "TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "ECDH-RSA-CAMELLIA128-SHA256",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDH-RSA-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC079,
        "TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "ECDH-RSA-CAMELLIA256-SHA384",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC07A,
        "TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_RSA_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC07B,
        "TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_RSA_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC07C,
        "TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_DHE_RSA_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC07D,
        "TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_DHE_RSA_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC07E,
        "TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC07F,
        "TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC080,
        "TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_DHE_DSS_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_DSS_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC081,
        "TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_DHE_DSS_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC082,
        "TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC083,
        "TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC084,
        "TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_DH_ANON_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DH_ANON_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DH_ANON_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC085,
        "TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_DH_ANON_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC086,
        "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_ECDHE_ECDSA_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC087,
        "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_ECDHE_ECDSA_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC088,
        "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC089,
        "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC08A,
        "TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_ECDHE_RSA_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC08B,
        "TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_ECDHE_RSA_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC08C,
        "TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC08D,
        "TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_PSK_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC08E,
        "TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_PSK_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_PSK_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC08F,
        "TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_PSK_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC090,
        "TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_DHE_PSK_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC091,
        "TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_DHE_PSK_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_CAMELLIA_128_GCM_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = new CipherSuite(0xC092,
        "TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256",
        "",
        "",
        "TLS_RSA_PSK_CAMELLIA_128_GCM_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_CAMELLIA_256_GCM_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = new CipherSuite(0xC093,
        "TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384",
        "",
        "",
        "TLS_RSA_PSK_CAMELLIA_256_GCM_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC094,
        "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "PSK-CAMELLIA128-SHA256",
        "TLS_PSK_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC095,
        "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "PSK-CAMELLIA256-SHA384",
        "TLS_PSK_CAMELLIA_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC096,
        "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "DHE-PSK-CAMELLIA128-SHA256",
        "TLS_DHE_PSK_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC097,
        "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "DHE-PSK-CAMELLIA256-SHA384",
        "TLS_DHE_PSK_CAMELLIA_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC098,
        "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "RSA-PSK-CAMELLIA128-SHA256",
        "TLS_RSA_PSK_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC099,
        "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "RSA-PSK-CAMELLIA256-SHA384",
        "TLS_RSA_PSK_CAMELLIA_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-CAMELLIA128-SHA256<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_CAMELLIA_128_CBC_SHA256<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new CipherSuite(0xC09A,
        "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256",
        "",
        "ECDHE-PSK-CAMELLIA128-SHA256",
        "TLS_ECDHE_PSK_CAMELLIA_128_CBC_SHA256",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-CAMELLIA256-SHA384<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_CAMELLIA_256_CBC_SHA384<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new CipherSuite(0xC09B,
        "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384",
        "",
        "ECDHE-PSK-CAMELLIA256-SHA384",
        "TLS_ECDHE_PSK_CAMELLIA_256_CBC_SHA384",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_128_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> AES128-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_128_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_128_CCM = new CipherSuite(0xC09C,
        "TLS_RSA_WITH_AES_128_CCM",
        "",
        "AES128-CCM",
        "TLS_RSA_AES_128_CCM",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_256_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> AES256-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_256_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_256_CCM = new CipherSuite(0xC09D,
        "TLS_RSA_WITH_AES_256_CCM",
        "",
        "AES256-CCM",
        "TLS_RSA_AES_256_CCM",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_128_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES128-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_128_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_128_CCM = new CipherSuite(0xC09E,
        "TLS_DHE_RSA_WITH_AES_128_CCM",
        "",
        "DHE-RSA-AES128-CCM",
        "TLS_DHE_RSA_AES_128_CCM",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_256_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES256-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_256_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_256_CCM = new CipherSuite(0xC09F,
        "TLS_DHE_RSA_WITH_AES_256_CCM",
        "",
        "DHE-RSA-AES256-CCM",
        "TLS_DHE_RSA_AES_256_CCM",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_128_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> AES128-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_128_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_128_CCM_8 = new CipherSuite(0xC0A0,
        "TLS_RSA_WITH_AES_128_CCM_8",
        "",
        "AES128-CCM8",
        "TLS_RSA_AES_128_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_WITH_AES_256_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> AES256-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_AES_256_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_WITH_AES_256_CCM_8 = new CipherSuite(0xC0A1,
        "TLS_RSA_WITH_AES_256_CCM_8",
        "",
        "AES256-CCM8",
        "TLS_RSA_AES_256_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_128_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES128-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_128_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_128_CCM_8 = new CipherSuite(0xC0A2,
        "TLS_DHE_RSA_WITH_AES_128_CCM_8",
        "",
        "DHE-RSA-AES128-CCM8",
        "TLS_DHE_RSA_AES_128_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_AES_256_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-RSA-AES256-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_AES_256_CCM_8<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_AES_256_CCM_8 = new CipherSuite(0xC0A3,
        "TLS_DHE_RSA_WITH_AES_256_CCM_8",
        "",
        "DHE-RSA-AES256-CCM8",
        "TLS_DHE_RSA_AES_256_CCM_8",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_128_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES128-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_128_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_128_CCM = new CipherSuite(0xC0A4,
        "TLS_PSK_WITH_AES_128_CCM",
        "",
        "PSK-AES128-CCM",
        "TLS_PSK_AES_128_CCM",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_256_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES256-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_256_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_256_CCM = new CipherSuite(0xC0A5,
        "TLS_PSK_WITH_AES_256_CCM",
        "",
        "PSK-AES256-CCM",
        "TLS_PSK_AES_256_CCM",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_128_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES128-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_128_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_128_CCM = new CipherSuite(0xC0A6,
        "TLS_DHE_PSK_WITH_AES_128_CCM",
        "",
        "DHE-PSK-AES128-CCM",
        "TLS_DHE_PSK_AES_128_CCM",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_AES_256_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES256-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_256_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_AES_256_CCM = new CipherSuite(0xC0A7,
        "TLS_DHE_PSK_WITH_AES_256_CCM",
        "",
        "DHE-PSK-AES256-CCM",
        "TLS_DHE_PSK_AES_256_CCM",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_128_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES128-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_128_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_128_CCM_8 = new CipherSuite(0xC0A8,
        "TLS_PSK_WITH_AES_128_CCM_8",
        "",
        "PSK-AES128-CCM8",
        "TLS_PSK_AES_128_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_AES_256_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-AES256-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_AES_256_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_AES_256_CCM_8 = new CipherSuite(0xC0A9,
        "TLS_PSK_WITH_AES_256_CCM_8",
        "",
        "PSK-AES256-CCM8",
        "TLS_PSK_AES_256_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_DHE_WITH_AES_128_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES128-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_128_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_DHE_WITH_AES_128_CCM_8 = new CipherSuite(0xC0AA,
        "TLS_PSK_DHE_WITH_AES_128_CCM_8",
        "",
        "DHE-PSK-AES128-CCM8",
        "TLS_DHE_PSK_AES_128_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_DHE_WITH_AES_256_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> DHE-PSK-AES256-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_AES_256_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_DHE_WITH_AES_256_CCM_8 = new CipherSuite(0xC0AB,
        "TLS_PSK_DHE_WITH_AES_256_CCM_8",
        "",
        "DHE-PSK-AES256-CCM8",
        "TLS_DHE_PSK_AES_256_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES128-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_128_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CCM = new CipherSuite(0xC0AC,
        "TLS_ECDHE_ECDSA_WITH_AES_128_CCM",
        "",
        "ECDHE-ECDSA-AES128-CCM",
        "TLS_ECDHE_ECDSA_AES_128_CCM",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_CCM<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES256-CCM<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_256_CCM<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CCM = new CipherSuite(0xC0AD,
        "TLS_ECDHE_ECDSA_WITH_AES_256_CCM",
        "",
        "ECDHE-ECDSA-AES256-CCM",
        "TLS_ECDHE_ECDSA_AES_256_CCM",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES128-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_128_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = new CipherSuite(0xC0AE,
        "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8",
        "",
        "ECDHE-ECDSA-AES128-CCM8",
        "TLS_ECDHE_ECDSA_AES_128_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-AES256-CCM8<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_AES_256_CCM_8<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = new CipherSuite(0xC0AF,
        "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8",
        "",
        "ECDHE-ECDSA-AES256-CCM8",
        "TLS_ECDHE_ECDSA_AES_256_CCM_8",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECCPWD_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECCPWD_WITH_AES_128_GCM_SHA256 = new CipherSuite(0xC0B0,
        "TLS_ECCPWD_WITH_AES_128_GCM_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECCPWD_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECCPWD_WITH_AES_256_GCM_SHA384 = new CipherSuite(0xC0B1,
        "TLS_ECCPWD_WITH_AES_256_GCM_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECCPWD_WITH_AES_128_CCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECCPWD_WITH_AES_128_CCM_SHA256 = new CipherSuite(0xC0B2,
        "TLS_ECCPWD_WITH_AES_128_CCM_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECCPWD_WITH_AES_256_CCM_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECCPWD_WITH_AES_256_CCM_SHA384 = new CipherSuite(0xC0B3,
        "TLS_ECCPWD_WITH_AES_256_CCM_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SHA256_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SHA256_SHA256 = new CipherSuite(0xC0B4,
        "TLS_SHA256_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_SHA384_SHA384<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_SHA384_SHA384 = new CipherSuite(0xC0B5,
        "TLS_SHA384_SHA384",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC = new CipherSuite(0xC100,
        "TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC = new CipherSuite(0xC101,
        "TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_GOSTR341112_256_WITH_28147_CNT_IMIT<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> TLS_GOSTR341112_256_28147_CNT_IMIT<br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_GOSTR341112_256_WITH_28147_CNT_IMIT = new CipherSuite(0xC102,
        "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT",
        "",
        "",
        "TLS_GOSTR341112_256_28147_CNT_IMIT",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L = new CipherSuite(0xC103,
        "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_GOSTR341112_256_WITH_MAGMA_MGM_L<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_GOSTR341112_256_WITH_MAGMA_MGM_L = new CipherSuite(0xC104,
        "TLS_GOSTR341112_256_WITH_MAGMA_MGM_L",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S = new CipherSuite(0xC105,
        "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_GOSTR341112_256_WITH_MAGMA_MGM_S<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> false<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_GOSTR341112_256_WITH_MAGMA_MGM_S = new CipherSuite(0xC106,
        "TLS_GOSTR341112_256_WITH_MAGMA_MGM_S",
        "",
        "",
        "",
        false,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDHE-RSA-CHACHA20-POLY1305<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_RSA_CHACHA20_POLY1305<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = new CipherSuite(0xCCA8,
        "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
        "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
        "ECDHE-RSA-CHACHA20-POLY1305",
        "TLS_ECDHE_RSA_CHACHA20_POLY1305",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDHE-ECDSA-CHACHA20-POLY1305<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_ECDSA_CHACHA20_POLY1305<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = new CipherSuite(0xCCA9,
        "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
        "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
        "ECDHE-ECDSA-CHACHA20-POLY1305",
        "TLS_ECDHE_ECDSA_CHACHA20_POLY1305",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-RSA-CHACHA20-POLY1305<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_RSA_CHACHA20_POLY1305<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = new CipherSuite(0xCCAA,
        "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
        "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
        "DHE-RSA-CHACHA20-POLY1305",
        "TLS_DHE_RSA_CHACHA20_POLY1305",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_PSK_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> PSK-CHACHA20-POLY1305<br/>
   * <strong>GnuTLS:</strong> TLS_PSK_CHACHA20_POLY1305<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = new CipherSuite(0xCCAB,
        "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256",
        "",
        "PSK-CHACHA20-POLY1305",
        "TLS_PSK_CHACHA20_POLY1305",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>OpenSSL:</strong> ECDHE-PSK-CHACHA20-POLY1305<br/>
   * <strong>GnuTLS:</strong> TLS_ECDHE_PSK_CHACHA20_POLY1305<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = new CipherSuite(0xCCAC,
        "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
        "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
        "ECDHE-PSK-CHACHA20-POLY1305",
        "TLS_ECDHE_PSK_CHACHA20_POLY1305",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>OpenSSL:</strong> DHE-PSK-CHACHA20-POLY1305<br/>
   * <strong>GnuTLS:</strong> TLS_DHE_PSK_CHACHA20_POLY1305<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = new CipherSuite(0xCCAD,
        "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
        "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
        "DHE-PSK-CHACHA20-POLY1305",
        "TLS_DHE_PSK_CHACHA20_POLY1305",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> RSA-PSK-CHACHA20-POLY1305<br/>
   * <strong>GnuTLS:</strong> TLS_RSA_PSK_CHACHA20_POLY1305<br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256 = new CipherSuite(0xCCAE,
        "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256",
        "",
        "RSA-PSK-CHACHA20-POLY1305",
        "TLS_RSA_PSK_CHACHA20_POLY1305",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256<br/>
   * <strong>NSS:</strong> TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 = new CipherSuite(0xD001,
        "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256",
        "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256",
        "",
        "",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384<br/>
   * <strong>NSS:</strong> TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384<br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 = new CipherSuite(0xD002,
        "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384",
        "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384",
        "",
        "",
        true,
        true);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> false<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256 = new CipherSuite(0xD003,
        "TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256",
        "",
        "",
        "",
        true,
        false);

  /**
   * Static variable for SipherSuite.<br/>
   * <strong>IANA:</strong> TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256<br/>
   * <strong>NSS:</strong> <br/>
   * <strong>OpenSSL:</strong> <br/>
   * <strong>GnuTLS:</strong> <br/>
   * <strong>DTLS-OK:</strong> true<br/>
   * <strong>Recommended:</strong> true<br/>
   */
  public static final CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256 = new CipherSuite(0xD005,
        "TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256",
        "",
        "",
        "",
        true,
        true);

  static {
    for (int i = 0x001C; i <= 0x001D; i++) {
      new CipherSuite(i, "Reserved to avoid conflicts with SSLv3", true, false);
    }
    for (int i = 0x0047; i <= 0x004F; i++) {
      new CipherSuite(i, "Reserved to avoid conflicts with deployed implementations", true, false);
    }
    for (int i = 0x0050; i <= 0x0058; i++) {
      new CipherSuite(i, "Reserved to avoid conflicts", true, false);
    }
    for (int i = 0x0059; i <= 0x005C; i++) {
      new CipherSuite(i, "Reserved to avoid conflicts with deployed implementations", true, false);
    }
    for (int i = 0x005D; i <= 0x005F; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x0060; i <= 0x0066; i++) {
      new CipherSuite(i, "Reserved to avoid conflicts with widely deployed implementations", true, false);
    }
    for (int i = 0x006E; i <= 0x0083; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x00C8; i <= 0x00FE; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x0100; i <= 0x09FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x0A00; i <= 0x0A09; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x0A0A, "Reserved", true, false, true);
    for (int i = 0x0A0B; i <= 0x0AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x0B00; i <= 0x12FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x1300, "Unassigned", false, true, false);
    for (int i = 0x1306; i <= 0x13FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x1400; i <= 0x19FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x1A00; i <= 0x1A19; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x1A1A, "Reserved", true, false, true);
    for (int i = 0x1A1B; i <= 0x1AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x1B00; i <= 0x29FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x2A00; i <= 0x2A29; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x2A2A, "Reserved", true, false, true);
    for (int i = 0x2A2B; i <= 0x2AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x2B00; i <= 0x39FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x3A00; i <= 0x3A39; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x3A3A, "Reserved", true, false, true);
    for (int i = 0x3A3B; i <= 0x3AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x3B00; i <= 0x49FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x4A00; i <= 0x4A49; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x4A4A, "Reserved", true, false, true);
    for (int i = 0x4A4B; i <= 0x4AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x4B00; i <= 0x55FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x5601; i <= 0x56FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x5700; i <= 0x59FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x5A00; i <= 0x5A59; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x5A5A, "Reserved", true, false, true);
    for (int i = 0x5A5B; i <= 0x5AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x5B00; i <= 0x69FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x6A00; i <= 0x6A69; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x6A6A, "Reserved", true, false, true);
    for (int i = 0x6A6B; i <= 0x6AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x6B00; i <= 0x79FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x7A00; i <= 0x7A79; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x7A7A, "Reserved", true, false, true);
    for (int i = 0x7A7B; i <= 0x7AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x7B00; i <= 0x89FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x8A00; i <= 0x8A89; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x8A8A, "Reserved", true, false, true);
    for (int i = 0x8A8B; i <= 0x8AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x8B00; i <= 0x99FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x9A00; i <= 0x9A99; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0x9A9A, "Reserved", true, false, true);
    for (int i = 0x9A9B; i <= 0x9AFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0x9B00; i <= 0xA9FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xAA00; i <= 0xAAA9; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xAAAA, "Reserved", true, false, true);
    for (int i = 0xAAAB; i <= 0xAAFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xAB00; i <= 0xB9FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xBA00; i <= 0xBAB9; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xBABA, "Reserved", true, false, true);
    for (int i = 0xBABB; i <= 0xBAFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xBB00; i <= 0xBFFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xC000, "Unassigned", false, true, false);
    for (int i = 0xC0B6; i <= 0xC0FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xC107; i <= 0xC1FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xC200; i <= 0xC9FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xCA00; i <= 0xCAC9; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xCACA, "Reserved", true, false, true);
    for (int i = 0xCACB; i <= 0xCAFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xCB00; i <= 0xCBFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xCC00; i <= 0xCCA7; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xCCAF; i <= 0xCCFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xCD00; i <= 0xCFFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xD000, "Unassigned", false, true, false);
    new CipherSuite(0xD004, "Unassigned", false, true, false);
    for (int i = 0xD006; i <= 0xD0FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xD100; i <= 0xD9FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xDA00; i <= 0xDAD9; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xDADA, "Reserved", true, false, true);
    for (int i = 0xDADB; i <= 0xDAFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xDB00; i <= 0xE9FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xEA00; i <= 0xEAE9; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xEAEA, "Reserved", true, false, true);
    for (int i = 0xEAEB; i <= 0xEAFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xEB00; i <= 0xF9FF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xFA00; i <= 0xFAC9; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    new CipherSuite(0xFAFA, "Reserved", true, false, true);
    for (int i = 0xFAFB; i <= 0xFAFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xFB00; i <= 0xFDFF; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xFE00; i <= 0xFEFD; i++) {
      new CipherSuite(i, "Unassigned", false, true);
    }
    for (int i = 0xFEFE; i <= 0xFEFF; i++) {
      new CipherSuite(i, "Reserved to avoid conflicts with widely deployed implementations", true, false);
    }
    for (int i = 0xFF00; i <= 0xFFFF; i++) {
      new CipherSuite(i, "Reserved for Private Use", true, false);
    }
  }

  private int value;

  private String iana;

  private String nss;

  private String openSsl;

  private String gnuTls;

  private boolean dtlsOk = false;

  private boolean recommended = false;

  private boolean reserved = false;

  private boolean unassigned = false;

  private boolean grease = false;

  private CipherSuite() {
    super();
  }

  private CipherSuite(int value, String iana, boolean reserved, boolean unassigned) {
    this.value = value;
    this.iana = iana;
    this.reserved = reserved;
    this.unassigned = unassigned;
    NAME_MAP.put(this.getName(), this);
    VALUE_MAP.put(this.value, this);
  }

  private CipherSuite(int value, String iana, boolean reserved, boolean unassigned,
      boolean grease) {
    this.value = value;
    this.iana = iana;
    this.reserved = reserved;
    this.unassigned = unassigned;
    this.grease = grease;
    NAME_MAP.put(this.getName(), this);
    VALUE_MAP.put(this.value, this);
  }

  private CipherSuite(int value, String iana, String nss, String openSsl, String gnuTls,
      boolean dtlsOk, boolean recommended) {
    this.value = value;
    this.iana = iana;
    this.nss = nss;
    this.openSsl = openSsl;
    this.gnuTls = gnuTls;
    this.dtlsOk = dtlsOk;
    this.recommended = recommended;
    NAME_MAP.put(this.getName(), this);
    VALUE_MAP.put(this.value, this);
  }

  private CipherSuite(int value, String iana, String nss, String openSsl, String gnuTls,
      boolean dtlsOk, boolean recommended, boolean reserved, boolean unassigned, boolean grease) {
    this.value = value;
    this.iana = iana;
    this.nss = nss;
    this.openSsl = openSsl;
    this.gnuTls = gnuTls;
    this.dtlsOk = dtlsOk;
    this.recommended = recommended;
    this.reserved = reserved;
    this.unassigned = unassigned;
    this.grease = grease;
    NAME_MAP.put(this.getName(), this);
    VALUE_MAP.put(this.value, this);
  }

  public int getValue() {
    return this.value;
  }

  public String getIana() {
    return this.iana;
  }

  public String getNss() {
    return this.nss;
  }

  public String getOpenSsl() {
    return this.openSsl;
  }

  public String getGnuTls() {
    return this.gnuTls;
  }

  public boolean isDtlsOk() {
    return this.dtlsOk;
  }

  public boolean isRecommended() {
    return this.recommended;
  }

  public boolean isReserved() {
    return this.reserved;
  }

  public boolean isUnassigned() {
    return this.unassigned;
  }

  public boolean isGrease() {
    return this.grease;
  }

  @JsonValue
  public String getName() {
    if (this.unassigned) {
      return String.format(NAME_FORMAT, UNASSIGNED, this.value);
    } else if (this.reserved) {
      return String.format(NAME_FORMAT, RESERVED, this.value);
    } else if (this.grease) {
      return String.format(NAME_FORMAT, GREASE, this.value);
    } else {
      return this.iana;
    }
  }

  @JsonCreator
  public static CipherSuite of(int value) {
    return VALUE_MAP.get(value);
  }

  @JsonCreator
  public static CipherSuite of(String name) {
    return NAME_MAP.get(name);
  }
}
