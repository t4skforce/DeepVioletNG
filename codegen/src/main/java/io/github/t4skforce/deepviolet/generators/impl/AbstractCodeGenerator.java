package io.github.t4skforce.deepviolet.generators.impl;

import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;

import io.github.t4skforce.deepviolet.generators.CodeGenerator;
import io.github.t4skforce.deepviolet.generators.JavaFileGenerator;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.lang.model.element.Modifier;

import org.apache.commons.collections4.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class AbstractCodeGenerator implements CodeGenerator {

  private static final Logger LOG = LoggerFactory.getLogger(AbstractCodeGenerator.class);

  protected abstract List<JavaFileGenerator> buildSources() throws Exception;

  protected abstract List<JavaFileGenerator> buildTests() throws Exception;

  @Override
  public List<JavaFile> sources() throws Exception {
    List<JavaFile> files = new ArrayList<>();
    processGenerators(files, buildSources());
    return files;
  }

  @Override
  public List<JavaFile> tests() throws Exception {
    List<JavaFile> files = new ArrayList<>();
    processGenerators(files, buildTests());
    return files;
  }

  private void processGenerators(List<JavaFile> files, List<JavaFileGenerator> gens) throws Exception {
    if (CollectionUtils.isNotEmpty(gens)) {
      for (JavaFileGenerator gen : gens) {
        if (gen.isChanged()) {
          gen.spec().addJavadoc("<strong>This class is generated by {@link $T}.\nDO NOT MODIFY!</strong><br/>\n\n", this.getClass()).fieldSpecs.add(0, FieldSpec
              .builder(Date.class, FIELD_UPDATED, Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).initializer(CodeBlock.of("new $T($LL)", Date.class, gen.getSourceUpdated().getTime())).build());
          files.add(gen.build());
        } else {
          LOG.info("{} has no changes", gen.getSimpleName());
        }
      }
    }
  }

  @Override
  public void close() throws IOException {
    // pass
  }

}
